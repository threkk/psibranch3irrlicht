/* soapStub.h
   Generated by gSOAP 2.8.17r from server.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_GameWS	"http://non-real-time-networking-web-service.psi"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20817
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_GameWS__ArrayOfString
#define SOAP_TYPE_GameWS__ArrayOfString (8)
/* GameWS:ArrayOfString */
class SOAP_CMAC GameWS__ArrayOfString
{
public:
	std::vector<std::string >string;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique type id SOAP_TYPE_GameWS__ArrayOfString */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         GameWS__ArrayOfString() { GameWS__ArrayOfString::soap_default(NULL); }
	virtual ~GameWS__ArrayOfString() { }
};
#endif

#ifndef SOAP_TYPE__GameWS__getGamesPlayed
#define SOAP_TYPE__GameWS__getGamesPlayed (9)
/* GameWS:getGamesPlayed */
class SOAP_CMAC _GameWS__getGamesPlayed
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique type id SOAP_TYPE__GameWS__getGamesPlayed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _GameWS__getGamesPlayed() { _GameWS__getGamesPlayed::soap_default(NULL); }
	virtual ~_GameWS__getGamesPlayed() { }
};
#endif

#ifndef SOAP_TYPE__GameWS__getGamesPlayedResponse
#define SOAP_TYPE__GameWS__getGamesPlayedResponse (10)
/* GameWS:getGamesPlayedResponse */
class SOAP_CMAC _GameWS__getGamesPlayedResponse
{
public:
	GameWS__ArrayOfString *getGamesPlayedResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type GameWS:ArrayOfString */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique type id SOAP_TYPE__GameWS__getGamesPlayedResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _GameWS__getGamesPlayedResponse() { _GameWS__getGamesPlayedResponse::soap_default(NULL); }
	virtual ~_GameWS__getGamesPlayedResponse() { }
};
#endif

#ifndef SOAP_TYPE__GameWS__register
#define SOAP_TYPE__GameWS__register (11)
/* GameWS:register */
class SOAP_CMAC _GameWS__register
{
public:
	std::string *gameName;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique type id SOAP_TYPE__GameWS__register */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _GameWS__register() { _GameWS__register::soap_default(NULL); }
	virtual ~_GameWS__register() { }
};
#endif

#ifndef SOAP_TYPE__GameWS__registerResponse
#define SOAP_TYPE__GameWS__registerResponse (12)
/* GameWS:registerResponse */
class SOAP_CMAC _GameWS__registerResponse
{
public:
	int registerResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique type id SOAP_TYPE__GameWS__registerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _GameWS__registerResponse() { _GameWS__registerResponse::soap_default(NULL); }
	virtual ~_GameWS__registerResponse() { }
};
#endif

#ifndef SOAP_TYPE__GameWS__getOpponentsIpAddress
#define SOAP_TYPE__GameWS__getOpponentsIpAddress (13)
/* GameWS:getOpponentsIpAddress */
class SOAP_CMAC _GameWS__getOpponentsIpAddress
{
public:
	std::string *gameName;	/* optional element of type xsd:string */
	int sessionId;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique type id SOAP_TYPE__GameWS__getOpponentsIpAddress */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _GameWS__getOpponentsIpAddress() { _GameWS__getOpponentsIpAddress::soap_default(NULL); }
	virtual ~_GameWS__getOpponentsIpAddress() { }
};
#endif

#ifndef SOAP_TYPE__GameWS__getOpponentsIpAddressResponse
#define SOAP_TYPE__GameWS__getOpponentsIpAddressResponse (14)
/* GameWS:getOpponentsIpAddressResponse */
class SOAP_CMAC _GameWS__getOpponentsIpAddressResponse
{
public:
	std::string *getOpponentsIpAddressResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique type id SOAP_TYPE__GameWS__getOpponentsIpAddressResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _GameWS__getOpponentsIpAddressResponse() { _GameWS__getOpponentsIpAddressResponse::soap_default(NULL); }
	virtual ~_GameWS__getOpponentsIpAddressResponse() { }
};
#endif

#ifndef SOAP_TYPE___GameWS__getGamesPlayed
#define SOAP_TYPE___GameWS__getGamesPlayed (23)
/* Operation wrapper: */
struct __GameWS__getGamesPlayed
{
public:
	_GameWS__getGamesPlayed *GameWS__getGamesPlayed;	/* optional element of type GameWS:getGamesPlayed */
public:
	int soap_type() const { return 23; } /* = unique type id SOAP_TYPE___GameWS__getGamesPlayed */
};
#endif

#ifndef SOAP_TYPE___GameWS__register
#define SOAP_TYPE___GameWS__register (27)
/* Operation wrapper: */
struct __GameWS__register
{
public:
	_GameWS__register *GameWS__register;	/* optional element of type GameWS:register */
public:
	int soap_type() const { return 27; } /* = unique type id SOAP_TYPE___GameWS__register */
};
#endif

#ifndef SOAP_TYPE___GameWS__getOpponentsIpAddress
#define SOAP_TYPE___GameWS__getOpponentsIpAddress (31)
/* Operation wrapper: */
struct __GameWS__getOpponentsIpAddress
{
public:
	_GameWS__getOpponentsIpAddress *GameWS__getOpponentsIpAddress;	/* optional element of type GameWS:getOpponentsIpAddress */
public:
	int soap_type() const { return 31; } /* = unique type id SOAP_TYPE___GameWS__getOpponentsIpAddress */
};
#endif

#ifndef SOAP_TYPE___GameWS__getGamesPlayed_
#define SOAP_TYPE___GameWS__getGamesPlayed_ (33)
/* Operation wrapper: */
struct __GameWS__getGamesPlayed_
{
public:
	_GameWS__getGamesPlayed *GameWS__getGamesPlayed;	/* optional element of type GameWS:getGamesPlayed */
public:
	int soap_type() const { return 33; } /* = unique type id SOAP_TYPE___GameWS__getGamesPlayed_ */
};
#endif

#ifndef SOAP_TYPE___GameWS__register_
#define SOAP_TYPE___GameWS__register_ (35)
/* Operation wrapper: */
struct __GameWS__register_
{
public:
	_GameWS__register *GameWS__register;	/* optional element of type GameWS:register */
public:
	int soap_type() const { return 35; } /* = unique type id SOAP_TYPE___GameWS__register_ */
};
#endif

#ifndef SOAP_TYPE___GameWS__getOpponentsIpAddress_
#define SOAP_TYPE___GameWS__getOpponentsIpAddress_ (37)
/* Operation wrapper: */
struct __GameWS__getOpponentsIpAddress_
{
public:
	_GameWS__getOpponentsIpAddress *GameWS__getOpponentsIpAddress;	/* optional element of type GameWS:getOpponentsIpAddress */
public:
	int soap_type() const { return 37; } /* = unique type id SOAP_TYPE___GameWS__getOpponentsIpAddress_ */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (38)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 38; } /* = unique type id SOAP_TYPE_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (39)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 39; } /* = unique type id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (41)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 41; } /* = unique type id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (44)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 44; } /* = unique type id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (45)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 45; } /* = unique type id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___GameWS__getGamesPlayed(struct soap *soap, const char *soap_endpoint, const char *soap_action, _GameWS__getGamesPlayed *GameWS__getGamesPlayed, _GameWS__getGamesPlayedResponse *GameWS__getGamesPlayedResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___GameWS__register(struct soap *soap, const char *soap_endpoint, const char *soap_action, _GameWS__register *GameWS__register, _GameWS__registerResponse *GameWS__registerResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___GameWS__getOpponentsIpAddress(struct soap *soap, const char *soap_endpoint, const char *soap_action, _GameWS__getOpponentsIpAddress *GameWS__getOpponentsIpAddress, _GameWS__getOpponentsIpAddressResponse *GameWS__getOpponentsIpAddressResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___GameWS__getGamesPlayed_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _GameWS__getGamesPlayed *GameWS__getGamesPlayed, _GameWS__getGamesPlayedResponse *GameWS__getGamesPlayedResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___GameWS__register_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _GameWS__register *GameWS__register, _GameWS__registerResponse *GameWS__registerResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___GameWS__getOpponentsIpAddress_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _GameWS__getOpponentsIpAddress *GameWS__getOpponentsIpAddress, _GameWS__getOpponentsIpAddressResponse *GameWS__getOpponentsIpAddressResponse);

#endif

/* End of soapStub.h */
