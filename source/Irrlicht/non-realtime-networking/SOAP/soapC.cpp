/* soapC.cpp
   Generated by gSOAP 2.8.17r from server.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.17r 2014-03-26 17:04:09 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_GameWS__ArrayOfString:
		return soap_in_GameWS__ArrayOfString(soap, NULL, NULL, "GameWS:ArrayOfString");
	case SOAP_TYPE_PointerTo_GameWS__getOpponentsIpAddressResponse:
		return soap_in_PointerTo_GameWS__getOpponentsIpAddressResponse(soap, NULL, NULL, "GameWS:getOpponentsIpAddressResponse");
	case SOAP_TYPE_PointerTo_GameWS__getOpponentsIpAddress:
		return soap_in_PointerTo_GameWS__getOpponentsIpAddress(soap, NULL, NULL, "GameWS:getOpponentsIpAddress");
	case SOAP_TYPE_PointerTo_GameWS__registerResponse:
		return soap_in_PointerTo_GameWS__registerResponse(soap, NULL, NULL, "GameWS:registerResponse");
	case SOAP_TYPE_PointerTo_GameWS__register:
		return soap_in_PointerTo_GameWS__register(soap, NULL, NULL, "GameWS:register");
	case SOAP_TYPE_PointerTo_GameWS__getGamesPlayedResponse:
		return soap_in_PointerTo_GameWS__getGamesPlayedResponse(soap, NULL, NULL, "GameWS:getGamesPlayedResponse");
	case SOAP_TYPE_PointerTo_GameWS__getGamesPlayed:
		return soap_in_PointerTo_GameWS__getGamesPlayed(soap, NULL, NULL, "GameWS:getGamesPlayed");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerToGameWS__ArrayOfString:
		return soap_in_PointerToGameWS__ArrayOfString(soap, NULL, NULL, "GameWS:ArrayOfString");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "GameWS:ArrayOfString"))
		{	*type = SOAP_TYPE_GameWS__ArrayOfString;
			return soap_in_GameWS__ArrayOfString(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "GameWS:getOpponentsIpAddressResponse"))
		{	*type = SOAP_TYPE__GameWS__getOpponentsIpAddressResponse;
			return soap_in__GameWS__getOpponentsIpAddressResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "GameWS:getOpponentsIpAddress"))
		{	*type = SOAP_TYPE__GameWS__getOpponentsIpAddress;
			return soap_in__GameWS__getOpponentsIpAddress(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "GameWS:registerResponse"))
		{	*type = SOAP_TYPE__GameWS__registerResponse;
			return soap_in__GameWS__registerResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "GameWS:register"))
		{	*type = SOAP_TYPE__GameWS__register;
			return soap_in__GameWS__register(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "GameWS:getGamesPlayedResponse"))
		{	*type = SOAP_TYPE__GameWS__getGamesPlayedResponse;
			return soap_in__GameWS__getGamesPlayedResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "GameWS:getGamesPlayed"))
		{	*type = SOAP_TYPE__GameWS__getGamesPlayed;
			return soap_in__GameWS__getGamesPlayed(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE__GameWS__getOpponentsIpAddressResponse:
		return ((_GameWS__getOpponentsIpAddressResponse *)ptr)->soap_out(soap, "GameWS:getOpponentsIpAddressResponse", id, NULL);
	case SOAP_TYPE__GameWS__getOpponentsIpAddress:
		return ((_GameWS__getOpponentsIpAddress *)ptr)->soap_out(soap, "GameWS:getOpponentsIpAddress", id, NULL);
	case SOAP_TYPE__GameWS__registerResponse:
		return ((_GameWS__registerResponse *)ptr)->soap_out(soap, "GameWS:registerResponse", id, NULL);
	case SOAP_TYPE__GameWS__register:
		return ((_GameWS__register *)ptr)->soap_out(soap, "GameWS:register", id, NULL);
	case SOAP_TYPE__GameWS__getGamesPlayedResponse:
		return ((_GameWS__getGamesPlayedResponse *)ptr)->soap_out(soap, "GameWS:getGamesPlayedResponse", id, NULL);
	case SOAP_TYPE__GameWS__getGamesPlayed:
		return ((_GameWS__getGamesPlayed *)ptr)->soap_out(soap, "GameWS:getGamesPlayed", id, NULL);
	case SOAP_TYPE_GameWS__ArrayOfString:
		return ((GameWS__ArrayOfString *)ptr)->soap_out(soap, tag, id, "GameWS:ArrayOfString");
	case SOAP_TYPE_PointerTo_GameWS__getOpponentsIpAddressResponse:
		return soap_out_PointerTo_GameWS__getOpponentsIpAddressResponse(soap, tag, id, (_GameWS__getOpponentsIpAddressResponse *const*)ptr, "GameWS:getOpponentsIpAddressResponse");
	case SOAP_TYPE_PointerTo_GameWS__getOpponentsIpAddress:
		return soap_out_PointerTo_GameWS__getOpponentsIpAddress(soap, tag, id, (_GameWS__getOpponentsIpAddress *const*)ptr, "GameWS:getOpponentsIpAddress");
	case SOAP_TYPE_PointerTo_GameWS__registerResponse:
		return soap_out_PointerTo_GameWS__registerResponse(soap, tag, id, (_GameWS__registerResponse *const*)ptr, "GameWS:registerResponse");
	case SOAP_TYPE_PointerTo_GameWS__register:
		return soap_out_PointerTo_GameWS__register(soap, tag, id, (_GameWS__register *const*)ptr, "GameWS:register");
	case SOAP_TYPE_PointerTo_GameWS__getGamesPlayedResponse:
		return soap_out_PointerTo_GameWS__getGamesPlayedResponse(soap, tag, id, (_GameWS__getGamesPlayedResponse *const*)ptr, "GameWS:getGamesPlayedResponse");
	case SOAP_TYPE_PointerTo_GameWS__getGamesPlayed:
		return soap_out_PointerTo_GameWS__getGamesPlayed(soap, tag, id, (_GameWS__getGamesPlayed *const*)ptr, "GameWS:getGamesPlayed");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerToGameWS__ArrayOfString:
		return soap_out_PointerToGameWS__ArrayOfString(soap, tag, id, (GameWS__ArrayOfString *const*)ptr, "GameWS:ArrayOfString");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__GameWS__getOpponentsIpAddressResponse:
		((_GameWS__getOpponentsIpAddressResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__GameWS__getOpponentsIpAddress:
		((_GameWS__getOpponentsIpAddress *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__GameWS__registerResponse:
		((_GameWS__registerResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__GameWS__register:
		((_GameWS__register *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__GameWS__getGamesPlayedResponse:
		((_GameWS__getGamesPlayedResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__GameWS__getGamesPlayed:
		((_GameWS__getGamesPlayed *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_GameWS__ArrayOfString:
		((GameWS__ArrayOfString *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___GameWS__getOpponentsIpAddress_:
		soap_serialize___GameWS__getOpponentsIpAddress_(soap, (const struct __GameWS__getOpponentsIpAddress_ *)ptr);
		break;
	case SOAP_TYPE___GameWS__register_:
		soap_serialize___GameWS__register_(soap, (const struct __GameWS__register_ *)ptr);
		break;
	case SOAP_TYPE___GameWS__getGamesPlayed_:
		soap_serialize___GameWS__getGamesPlayed_(soap, (const struct __GameWS__getGamesPlayed_ *)ptr);
		break;
	case SOAP_TYPE___GameWS__getOpponentsIpAddress:
		soap_serialize___GameWS__getOpponentsIpAddress(soap, (const struct __GameWS__getOpponentsIpAddress *)ptr);
		break;
	case SOAP_TYPE___GameWS__register:
		soap_serialize___GameWS__register(soap, (const struct __GameWS__register *)ptr);
		break;
	case SOAP_TYPE___GameWS__getGamesPlayed:
		soap_serialize___GameWS__getGamesPlayed(soap, (const struct __GameWS__getGamesPlayed *)ptr);
		break;
	case SOAP_TYPE_PointerTo_GameWS__getOpponentsIpAddressResponse:
		soap_serialize_PointerTo_GameWS__getOpponentsIpAddressResponse(soap, (_GameWS__getOpponentsIpAddressResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_GameWS__getOpponentsIpAddress:
		soap_serialize_PointerTo_GameWS__getOpponentsIpAddress(soap, (_GameWS__getOpponentsIpAddress *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_GameWS__registerResponse:
		soap_serialize_PointerTo_GameWS__registerResponse(soap, (_GameWS__registerResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_GameWS__register:
		soap_serialize_PointerTo_GameWS__register(soap, (_GameWS__register *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_GameWS__getGamesPlayedResponse:
		soap_serialize_PointerTo_GameWS__getGamesPlayedResponse(soap, (_GameWS__getGamesPlayedResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_GameWS__getGamesPlayed:
		soap_serialize_PointerTo_GameWS__getGamesPlayed(soap, (_GameWS__getGamesPlayed *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerToGameWS__ArrayOfString:
		soap_serialize_PointerToGameWS__ArrayOfString(soap, (GameWS__ArrayOfString *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_GameWS__ArrayOfString:
		return (void*)soap_instantiate_GameWS__ArrayOfString(soap, -1, type, arrayType, n);
	case SOAP_TYPE__GameWS__getGamesPlayed:
		return (void*)soap_instantiate__GameWS__getGamesPlayed(soap, -1, type, arrayType, n);
	case SOAP_TYPE__GameWS__getGamesPlayedResponse:
		return (void*)soap_instantiate__GameWS__getGamesPlayedResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__GameWS__register:
		return (void*)soap_instantiate__GameWS__register(soap, -1, type, arrayType, n);
	case SOAP_TYPE__GameWS__registerResponse:
		return (void*)soap_instantiate__GameWS__registerResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__GameWS__getOpponentsIpAddress:
		return (void*)soap_instantiate__GameWS__getOpponentsIpAddress(soap, -1, type, arrayType, n);
	case SOAP_TYPE__GameWS__getOpponentsIpAddressResponse:
		return (void*)soap_instantiate__GameWS__getOpponentsIpAddressResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___GameWS__getGamesPlayed:
		return (void*)soap_instantiate___GameWS__getGamesPlayed(soap, -1, type, arrayType, n);
	case SOAP_TYPE___GameWS__register:
		return (void*)soap_instantiate___GameWS__register(soap, -1, type, arrayType, n);
	case SOAP_TYPE___GameWS__getOpponentsIpAddress:
		return (void*)soap_instantiate___GameWS__getOpponentsIpAddress(soap, -1, type, arrayType, n);
	case SOAP_TYPE___GameWS__getGamesPlayed_:
		return (void*)soap_instantiate___GameWS__getGamesPlayed_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___GameWS__register_:
		return (void*)soap_instantiate___GameWS__register_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___GameWS__getOpponentsIpAddress_:
		return (void*)soap_instantiate___GameWS__getOpponentsIpAddress_(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		return (void*)soap_instantiate_std__vectorTemplateOfstd__string(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_GameWS__ArrayOfString:
		if (p->size < 0)
			SOAP_DELETE((GameWS__ArrayOfString*)p->ptr);
		else
			SOAP_DELETE_ARRAY((GameWS__ArrayOfString*)p->ptr);
		break;
	case SOAP_TYPE__GameWS__getGamesPlayed:
		if (p->size < 0)
			SOAP_DELETE((_GameWS__getGamesPlayed*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_GameWS__getGamesPlayed*)p->ptr);
		break;
	case SOAP_TYPE__GameWS__getGamesPlayedResponse:
		if (p->size < 0)
			SOAP_DELETE((_GameWS__getGamesPlayedResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_GameWS__getGamesPlayedResponse*)p->ptr);
		break;
	case SOAP_TYPE__GameWS__register:
		if (p->size < 0)
			SOAP_DELETE((_GameWS__register*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_GameWS__register*)p->ptr);
		break;
	case SOAP_TYPE__GameWS__registerResponse:
		if (p->size < 0)
			SOAP_DELETE((_GameWS__registerResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_GameWS__registerResponse*)p->ptr);
		break;
	case SOAP_TYPE__GameWS__getOpponentsIpAddress:
		if (p->size < 0)
			SOAP_DELETE((_GameWS__getOpponentsIpAddress*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_GameWS__getOpponentsIpAddress*)p->ptr);
		break;
	case SOAP_TYPE__GameWS__getOpponentsIpAddressResponse:
		if (p->size < 0)
			SOAP_DELETE((_GameWS__getOpponentsIpAddressResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_GameWS__getOpponentsIpAddressResponse*)p->ptr);
		break;
	case SOAP_TYPE___GameWS__getGamesPlayed:
		if (p->size < 0)
			SOAP_DELETE((struct __GameWS__getGamesPlayed*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __GameWS__getGamesPlayed*)p->ptr);
		break;
	case SOAP_TYPE___GameWS__register:
		if (p->size < 0)
			SOAP_DELETE((struct __GameWS__register*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __GameWS__register*)p->ptr);
		break;
	case SOAP_TYPE___GameWS__getOpponentsIpAddress:
		if (p->size < 0)
			SOAP_DELETE((struct __GameWS__getOpponentsIpAddress*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __GameWS__getOpponentsIpAddress*)p->ptr);
		break;
	case SOAP_TYPE___GameWS__getGamesPlayed_:
		if (p->size < 0)
			SOAP_DELETE((struct __GameWS__getGamesPlayed_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __GameWS__getGamesPlayed_*)p->ptr);
		break;
	case SOAP_TYPE___GameWS__register_:
		if (p->size < 0)
			SOAP_DELETE((struct __GameWS__register_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __GameWS__register_*)p->ptr);
		break;
	case SOAP_TYPE___GameWS__getOpponentsIpAddress_:
		if (p->size < 0)
			SOAP_DELETE((struct __GameWS__getOpponentsIpAddress_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __GameWS__getOpponentsIpAddress_*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		if (p->size < 0)
			SOAP_DELETE((std::vector<std::string >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<std::string >*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<std::string >*)p)[len] = *(std::string *)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void _GameWS__getOpponentsIpAddressResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_GameWS__getOpponentsIpAddressResponse::getOpponentsIpAddressResult = NULL;
	/* transient soap skipped */
}

void _GameWS__getOpponentsIpAddressResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_GameWS__getOpponentsIpAddressResponse::getOpponentsIpAddressResult);
	/* transient soap skipped */
#endif
}

int _GameWS__getOpponentsIpAddressResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__GameWS__getOpponentsIpAddressResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__GameWS__getOpponentsIpAddressResponse(struct soap *soap, const char *tag, int id, const _GameWS__getOpponentsIpAddressResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__GameWS__getOpponentsIpAddressResponse), type))
		return soap->error;
	if (a->getOpponentsIpAddressResult)
		soap_element_result(soap, "GameWS:getOpponentsIpAddressResult");
	if (soap_out_PointerTostd__string(soap, "GameWS:getOpponentsIpAddressResult", -1, &(a->_GameWS__getOpponentsIpAddressResponse::getOpponentsIpAddressResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_GameWS__getOpponentsIpAddressResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__GameWS__getOpponentsIpAddressResponse(soap, tag, this, type);
}

SOAP_FMAC3 _GameWS__getOpponentsIpAddressResponse * SOAP_FMAC4 soap_in__GameWS__getOpponentsIpAddressResponse(struct soap *soap, const char *tag, _GameWS__getOpponentsIpAddressResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_GameWS__getOpponentsIpAddressResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__GameWS__getOpponentsIpAddressResponse, sizeof(_GameWS__getOpponentsIpAddressResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__GameWS__getOpponentsIpAddressResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_GameWS__getOpponentsIpAddressResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_getOpponentsIpAddressResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getOpponentsIpAddressResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "GameWS:getOpponentsIpAddressResult", &(a->_GameWS__getOpponentsIpAddressResponse::getOpponentsIpAddressResult), "xsd:string"))
				{	soap_flag_getOpponentsIpAddressResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "GameWS:getOpponentsIpAddressResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_GameWS__getOpponentsIpAddressResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__GameWS__getOpponentsIpAddressResponse, 0, sizeof(_GameWS__getOpponentsIpAddressResponse), 0, soap_copy__GameWS__getOpponentsIpAddressResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _GameWS__getOpponentsIpAddressResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__GameWS__getOpponentsIpAddressResponse);
	if (this->soap_out(soap, tag?tag:"GameWS:getOpponentsIpAddressResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_GameWS__getOpponentsIpAddressResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__GameWS__getOpponentsIpAddressResponse(soap, this, tag, type);
}

SOAP_FMAC3 _GameWS__getOpponentsIpAddressResponse * SOAP_FMAC4 soap_get__GameWS__getOpponentsIpAddressResponse(struct soap *soap, _GameWS__getOpponentsIpAddressResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__GameWS__getOpponentsIpAddressResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _GameWS__getOpponentsIpAddressResponse * SOAP_FMAC2 soap_instantiate__GameWS__getOpponentsIpAddressResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__GameWS__getOpponentsIpAddressResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__GameWS__getOpponentsIpAddressResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_GameWS__getOpponentsIpAddressResponse);
		if (size)
			*size = sizeof(_GameWS__getOpponentsIpAddressResponse);
		((_GameWS__getOpponentsIpAddressResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_GameWS__getOpponentsIpAddressResponse, n);
		if (size)
			*size = n * sizeof(_GameWS__getOpponentsIpAddressResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_GameWS__getOpponentsIpAddressResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_GameWS__getOpponentsIpAddressResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__GameWS__getOpponentsIpAddressResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _GameWS__getOpponentsIpAddressResponse %p -> %p\n", q, p));
	*(_GameWS__getOpponentsIpAddressResponse*)p = *(_GameWS__getOpponentsIpAddressResponse*)q;
}

void _GameWS__getOpponentsIpAddress::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_GameWS__getOpponentsIpAddress::gameName = NULL;
	soap_default_int(soap, &this->_GameWS__getOpponentsIpAddress::sessionId);
	/* transient soap skipped */
}

void _GameWS__getOpponentsIpAddress::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_GameWS__getOpponentsIpAddress::gameName);
	/* transient soap skipped */
#endif
}

int _GameWS__getOpponentsIpAddress::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__GameWS__getOpponentsIpAddress(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__GameWS__getOpponentsIpAddress(struct soap *soap, const char *tag, int id, const _GameWS__getOpponentsIpAddress *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__GameWS__getOpponentsIpAddress), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "GameWS:gameName", -1, &(a->_GameWS__getOpponentsIpAddress::gameName), ""))
		return soap->error;
	if (soap_out_int(soap, "GameWS:sessionId", -1, &(a->_GameWS__getOpponentsIpAddress::sessionId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_GameWS__getOpponentsIpAddress::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__GameWS__getOpponentsIpAddress(soap, tag, this, type);
}

SOAP_FMAC3 _GameWS__getOpponentsIpAddress * SOAP_FMAC4 soap_in__GameWS__getOpponentsIpAddress(struct soap *soap, const char *tag, _GameWS__getOpponentsIpAddress *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_GameWS__getOpponentsIpAddress *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__GameWS__getOpponentsIpAddress, sizeof(_GameWS__getOpponentsIpAddress), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__GameWS__getOpponentsIpAddress)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_GameWS__getOpponentsIpAddress *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_gameName1 = 1;
	size_t soap_flag_sessionId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_gameName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "GameWS:gameName", &(a->_GameWS__getOpponentsIpAddress::gameName), "xsd:string"))
				{	soap_flag_gameName1--;
					continue;
				}
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "GameWS:sessionId", &(a->_GameWS__getOpponentsIpAddress::sessionId), "xsd:int"))
				{	soap_flag_sessionId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_GameWS__getOpponentsIpAddress *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__GameWS__getOpponentsIpAddress, 0, sizeof(_GameWS__getOpponentsIpAddress), 0, soap_copy__GameWS__getOpponentsIpAddress);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _GameWS__getOpponentsIpAddress::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__GameWS__getOpponentsIpAddress);
	if (this->soap_out(soap, tag?tag:"GameWS:getOpponentsIpAddress", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_GameWS__getOpponentsIpAddress::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__GameWS__getOpponentsIpAddress(soap, this, tag, type);
}

SOAP_FMAC3 _GameWS__getOpponentsIpAddress * SOAP_FMAC4 soap_get__GameWS__getOpponentsIpAddress(struct soap *soap, _GameWS__getOpponentsIpAddress *p, const char *tag, const char *type)
{
	if ((p = soap_in__GameWS__getOpponentsIpAddress(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _GameWS__getOpponentsIpAddress * SOAP_FMAC2 soap_instantiate__GameWS__getOpponentsIpAddress(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__GameWS__getOpponentsIpAddress(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__GameWS__getOpponentsIpAddress, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_GameWS__getOpponentsIpAddress);
		if (size)
			*size = sizeof(_GameWS__getOpponentsIpAddress);
		((_GameWS__getOpponentsIpAddress*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_GameWS__getOpponentsIpAddress, n);
		if (size)
			*size = n * sizeof(_GameWS__getOpponentsIpAddress);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_GameWS__getOpponentsIpAddress*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_GameWS__getOpponentsIpAddress*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__GameWS__getOpponentsIpAddress(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _GameWS__getOpponentsIpAddress %p -> %p\n", q, p));
	*(_GameWS__getOpponentsIpAddress*)p = *(_GameWS__getOpponentsIpAddress*)q;
}

void _GameWS__registerResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_GameWS__registerResponse::registerResult);
	/* transient soap skipped */
}

void _GameWS__registerResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int _GameWS__registerResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__GameWS__registerResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__GameWS__registerResponse(struct soap *soap, const char *tag, int id, const _GameWS__registerResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__GameWS__registerResponse), type))
		return soap->error;
	soap_element_result(soap, "GameWS:registerResult");
	if (soap_out_int(soap, "GameWS:registerResult", -1, &(a->_GameWS__registerResponse::registerResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_GameWS__registerResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__GameWS__registerResponse(soap, tag, this, type);
}

SOAP_FMAC3 _GameWS__registerResponse * SOAP_FMAC4 soap_in__GameWS__registerResponse(struct soap *soap, const char *tag, _GameWS__registerResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_GameWS__registerResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__GameWS__registerResponse, sizeof(_GameWS__registerResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__GameWS__registerResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_GameWS__registerResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_registerResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_registerResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "GameWS:registerResult", &(a->_GameWS__registerResponse::registerResult), "xsd:int"))
				{	soap_flag_registerResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "GameWS:registerResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_GameWS__registerResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__GameWS__registerResponse, 0, sizeof(_GameWS__registerResponse), 0, soap_copy__GameWS__registerResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_registerResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _GameWS__registerResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__GameWS__registerResponse);
	if (this->soap_out(soap, tag?tag:"GameWS:registerResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_GameWS__registerResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__GameWS__registerResponse(soap, this, tag, type);
}

SOAP_FMAC3 _GameWS__registerResponse * SOAP_FMAC4 soap_get__GameWS__registerResponse(struct soap *soap, _GameWS__registerResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__GameWS__registerResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _GameWS__registerResponse * SOAP_FMAC2 soap_instantiate__GameWS__registerResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__GameWS__registerResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__GameWS__registerResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_GameWS__registerResponse);
		if (size)
			*size = sizeof(_GameWS__registerResponse);
		((_GameWS__registerResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_GameWS__registerResponse, n);
		if (size)
			*size = n * sizeof(_GameWS__registerResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_GameWS__registerResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_GameWS__registerResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__GameWS__registerResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _GameWS__registerResponse %p -> %p\n", q, p));
	*(_GameWS__registerResponse*)p = *(_GameWS__registerResponse*)q;
}

void _GameWS__register::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_GameWS__register::gameName = NULL;
	/* transient soap skipped */
}

void _GameWS__register::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_GameWS__register::gameName);
	/* transient soap skipped */
#endif
}

int _GameWS__register::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__GameWS__register(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__GameWS__register(struct soap *soap, const char *tag, int id, const _GameWS__register *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__GameWS__register), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "GameWS:gameName", -1, &(a->_GameWS__register::gameName), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_GameWS__register::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__GameWS__register(soap, tag, this, type);
}

SOAP_FMAC3 _GameWS__register * SOAP_FMAC4 soap_in__GameWS__register(struct soap *soap, const char *tag, _GameWS__register *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_GameWS__register *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__GameWS__register, sizeof(_GameWS__register), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__GameWS__register)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_GameWS__register *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_gameName1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_gameName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "GameWS:gameName", &(a->_GameWS__register::gameName), "xsd:string"))
				{	soap_flag_gameName1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_GameWS__register *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__GameWS__register, 0, sizeof(_GameWS__register), 0, soap_copy__GameWS__register);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _GameWS__register::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__GameWS__register);
	if (this->soap_out(soap, tag?tag:"GameWS:register", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_GameWS__register::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__GameWS__register(soap, this, tag, type);
}

SOAP_FMAC3 _GameWS__register * SOAP_FMAC4 soap_get__GameWS__register(struct soap *soap, _GameWS__register *p, const char *tag, const char *type)
{
	if ((p = soap_in__GameWS__register(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _GameWS__register * SOAP_FMAC2 soap_instantiate__GameWS__register(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__GameWS__register(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__GameWS__register, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_GameWS__register);
		if (size)
			*size = sizeof(_GameWS__register);
		((_GameWS__register*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_GameWS__register, n);
		if (size)
			*size = n * sizeof(_GameWS__register);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_GameWS__register*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_GameWS__register*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__GameWS__register(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _GameWS__register %p -> %p\n", q, p));
	*(_GameWS__register*)p = *(_GameWS__register*)q;
}

void _GameWS__getGamesPlayedResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_GameWS__getGamesPlayedResponse::getGamesPlayedResult = NULL;
	/* transient soap skipped */
}

void _GameWS__getGamesPlayedResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToGameWS__ArrayOfString(soap, &this->_GameWS__getGamesPlayedResponse::getGamesPlayedResult);
	/* transient soap skipped */
#endif
}

int _GameWS__getGamesPlayedResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__GameWS__getGamesPlayedResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__GameWS__getGamesPlayedResponse(struct soap *soap, const char *tag, int id, const _GameWS__getGamesPlayedResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__GameWS__getGamesPlayedResponse), type))
		return soap->error;
	if (a->getGamesPlayedResult)
		soap_element_result(soap, "GameWS:getGamesPlayedResult");
	if (soap_out_PointerToGameWS__ArrayOfString(soap, "GameWS:getGamesPlayedResult", -1, &(a->_GameWS__getGamesPlayedResponse::getGamesPlayedResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_GameWS__getGamesPlayedResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__GameWS__getGamesPlayedResponse(soap, tag, this, type);
}

SOAP_FMAC3 _GameWS__getGamesPlayedResponse * SOAP_FMAC4 soap_in__GameWS__getGamesPlayedResponse(struct soap *soap, const char *tag, _GameWS__getGamesPlayedResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_GameWS__getGamesPlayedResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__GameWS__getGamesPlayedResponse, sizeof(_GameWS__getGamesPlayedResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__GameWS__getGamesPlayedResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_GameWS__getGamesPlayedResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_getGamesPlayedResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getGamesPlayedResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToGameWS__ArrayOfString(soap, "GameWS:getGamesPlayedResult", &(a->_GameWS__getGamesPlayedResponse::getGamesPlayedResult), "GameWS:ArrayOfString"))
				{	soap_flag_getGamesPlayedResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "GameWS:getGamesPlayedResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_GameWS__getGamesPlayedResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__GameWS__getGamesPlayedResponse, 0, sizeof(_GameWS__getGamesPlayedResponse), 0, soap_copy__GameWS__getGamesPlayedResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _GameWS__getGamesPlayedResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__GameWS__getGamesPlayedResponse);
	if (this->soap_out(soap, tag?tag:"GameWS:getGamesPlayedResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_GameWS__getGamesPlayedResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__GameWS__getGamesPlayedResponse(soap, this, tag, type);
}

SOAP_FMAC3 _GameWS__getGamesPlayedResponse * SOAP_FMAC4 soap_get__GameWS__getGamesPlayedResponse(struct soap *soap, _GameWS__getGamesPlayedResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__GameWS__getGamesPlayedResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _GameWS__getGamesPlayedResponse * SOAP_FMAC2 soap_instantiate__GameWS__getGamesPlayedResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__GameWS__getGamesPlayedResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__GameWS__getGamesPlayedResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_GameWS__getGamesPlayedResponse);
		if (size)
			*size = sizeof(_GameWS__getGamesPlayedResponse);
		((_GameWS__getGamesPlayedResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_GameWS__getGamesPlayedResponse, n);
		if (size)
			*size = n * sizeof(_GameWS__getGamesPlayedResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_GameWS__getGamesPlayedResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_GameWS__getGamesPlayedResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__GameWS__getGamesPlayedResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _GameWS__getGamesPlayedResponse %p -> %p\n", q, p));
	*(_GameWS__getGamesPlayedResponse*)p = *(_GameWS__getGamesPlayedResponse*)q;
}

void _GameWS__getGamesPlayed::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _GameWS__getGamesPlayed::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int _GameWS__getGamesPlayed::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__GameWS__getGamesPlayed(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__GameWS__getGamesPlayed(struct soap *soap, const char *tag, int id, const _GameWS__getGamesPlayed *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__GameWS__getGamesPlayed), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_GameWS__getGamesPlayed::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__GameWS__getGamesPlayed(soap, tag, this, type);
}

SOAP_FMAC3 _GameWS__getGamesPlayed * SOAP_FMAC4 soap_in__GameWS__getGamesPlayed(struct soap *soap, const char *tag, _GameWS__getGamesPlayed *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_GameWS__getGamesPlayed *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__GameWS__getGamesPlayed, sizeof(_GameWS__getGamesPlayed), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__GameWS__getGamesPlayed)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_GameWS__getGamesPlayed *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_GameWS__getGamesPlayed *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__GameWS__getGamesPlayed, 0, sizeof(_GameWS__getGamesPlayed), 0, soap_copy__GameWS__getGamesPlayed);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _GameWS__getGamesPlayed::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__GameWS__getGamesPlayed);
	if (this->soap_out(soap, tag?tag:"GameWS:getGamesPlayed", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_GameWS__getGamesPlayed::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__GameWS__getGamesPlayed(soap, this, tag, type);
}

SOAP_FMAC3 _GameWS__getGamesPlayed * SOAP_FMAC4 soap_get__GameWS__getGamesPlayed(struct soap *soap, _GameWS__getGamesPlayed *p, const char *tag, const char *type)
{
	if ((p = soap_in__GameWS__getGamesPlayed(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _GameWS__getGamesPlayed * SOAP_FMAC2 soap_instantiate__GameWS__getGamesPlayed(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__GameWS__getGamesPlayed(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__GameWS__getGamesPlayed, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_GameWS__getGamesPlayed);
		if (size)
			*size = sizeof(_GameWS__getGamesPlayed);
		((_GameWS__getGamesPlayed*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_GameWS__getGamesPlayed, n);
		if (size)
			*size = n * sizeof(_GameWS__getGamesPlayed);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_GameWS__getGamesPlayed*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_GameWS__getGamesPlayed*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__GameWS__getGamesPlayed(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _GameWS__getGamesPlayed %p -> %p\n", q, p));
	*(_GameWS__getGamesPlayed*)p = *(_GameWS__getGamesPlayed*)q;
}

void GameWS__ArrayOfString::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfstd__string(soap, &this->GameWS__ArrayOfString::string);
	/* transient soap skipped */
}

void GameWS__ArrayOfString::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfstd__string(soap, &this->GameWS__ArrayOfString::string);
	/* transient soap skipped */
#endif
}

int GameWS__ArrayOfString::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_GameWS__ArrayOfString(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_GameWS__ArrayOfString(struct soap *soap, const char *tag, int id, const GameWS__ArrayOfString *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_GameWS__ArrayOfString), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfstd__string(soap, "GameWS:string", -1, &(a->GameWS__ArrayOfString::string), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *GameWS__ArrayOfString::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_GameWS__ArrayOfString(soap, tag, this, type);
}

SOAP_FMAC3 GameWS__ArrayOfString * SOAP_FMAC4 soap_in_GameWS__ArrayOfString(struct soap *soap, const char *tag, GameWS__ArrayOfString *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (GameWS__ArrayOfString *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_GameWS__ArrayOfString, sizeof(GameWS__ArrayOfString), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_GameWS__ArrayOfString)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (GameWS__ArrayOfString *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfstd__string(soap, "GameWS:string", &(a->GameWS__ArrayOfString::string), "xsd:string"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (GameWS__ArrayOfString *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_GameWS__ArrayOfString, 0, sizeof(GameWS__ArrayOfString), 0, soap_copy_GameWS__ArrayOfString);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int GameWS__ArrayOfString::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_GameWS__ArrayOfString);
	if (this->soap_out(soap, tag?tag:"GameWS:ArrayOfString", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *GameWS__ArrayOfString::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_GameWS__ArrayOfString(soap, this, tag, type);
}

SOAP_FMAC3 GameWS__ArrayOfString * SOAP_FMAC4 soap_get_GameWS__ArrayOfString(struct soap *soap, GameWS__ArrayOfString *p, const char *tag, const char *type)
{
	if ((p = soap_in_GameWS__ArrayOfString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 GameWS__ArrayOfString * SOAP_FMAC2 soap_instantiate_GameWS__ArrayOfString(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_GameWS__ArrayOfString(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_GameWS__ArrayOfString, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(GameWS__ArrayOfString);
		if (size)
			*size = sizeof(GameWS__ArrayOfString);
		((GameWS__ArrayOfString*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(GameWS__ArrayOfString, n);
		if (size)
			*size = n * sizeof(GameWS__ArrayOfString);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((GameWS__ArrayOfString*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (GameWS__ArrayOfString*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_GameWS__ArrayOfString(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying GameWS__ArrayOfString %p -> %p\n", q, p));
	*(GameWS__ArrayOfString*)p = *(GameWS__ArrayOfString*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___GameWS__getOpponentsIpAddress_(struct soap *soap, struct __GameWS__getOpponentsIpAddress_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->GameWS__getOpponentsIpAddress = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___GameWS__getOpponentsIpAddress_(struct soap *soap, const struct __GameWS__getOpponentsIpAddress_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_GameWS__getOpponentsIpAddress(soap, &a->GameWS__getOpponentsIpAddress);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___GameWS__getOpponentsIpAddress_(struct soap *soap, const char *tag, int id, const struct __GameWS__getOpponentsIpAddress_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_GameWS__getOpponentsIpAddress(soap, "GameWS:getOpponentsIpAddress", -1, &a->GameWS__getOpponentsIpAddress, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __GameWS__getOpponentsIpAddress_ * SOAP_FMAC4 soap_in___GameWS__getOpponentsIpAddress_(struct soap *soap, const char *tag, struct __GameWS__getOpponentsIpAddress_ *a, const char *type)
{
	size_t soap_flag_GameWS__getOpponentsIpAddress = 1;
	short soap_flag;
	a = (struct __GameWS__getOpponentsIpAddress_ *)soap_id_enter(soap, "", a, SOAP_TYPE___GameWS__getOpponentsIpAddress_, sizeof(struct __GameWS__getOpponentsIpAddress_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___GameWS__getOpponentsIpAddress_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GameWS__getOpponentsIpAddress && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_GameWS__getOpponentsIpAddress(soap, "GameWS:getOpponentsIpAddress", &a->GameWS__getOpponentsIpAddress, ""))
				{	soap_flag_GameWS__getOpponentsIpAddress--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___GameWS__getOpponentsIpAddress_(struct soap *soap, const struct __GameWS__getOpponentsIpAddress_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___GameWS__getOpponentsIpAddress_(soap, tag?tag:"-GameWS:getOpponentsIpAddress", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __GameWS__getOpponentsIpAddress_ * SOAP_FMAC4 soap_get___GameWS__getOpponentsIpAddress_(struct soap *soap, struct __GameWS__getOpponentsIpAddress_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___GameWS__getOpponentsIpAddress_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __GameWS__getOpponentsIpAddress_ * SOAP_FMAC2 soap_instantiate___GameWS__getOpponentsIpAddress_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___GameWS__getOpponentsIpAddress_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___GameWS__getOpponentsIpAddress_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __GameWS__getOpponentsIpAddress_);
		if (size)
			*size = sizeof(struct __GameWS__getOpponentsIpAddress_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __GameWS__getOpponentsIpAddress_, n);
		if (size)
			*size = n * sizeof(struct __GameWS__getOpponentsIpAddress_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __GameWS__getOpponentsIpAddress_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___GameWS__getOpponentsIpAddress_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __GameWS__getOpponentsIpAddress_ %p -> %p\n", q, p));
	*(struct __GameWS__getOpponentsIpAddress_*)p = *(struct __GameWS__getOpponentsIpAddress_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___GameWS__register_(struct soap *soap, struct __GameWS__register_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->GameWS__register = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___GameWS__register_(struct soap *soap, const struct __GameWS__register_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_GameWS__register(soap, &a->GameWS__register);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___GameWS__register_(struct soap *soap, const char *tag, int id, const struct __GameWS__register_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_GameWS__register(soap, "GameWS:register", -1, &a->GameWS__register, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __GameWS__register_ * SOAP_FMAC4 soap_in___GameWS__register_(struct soap *soap, const char *tag, struct __GameWS__register_ *a, const char *type)
{
	size_t soap_flag_GameWS__register = 1;
	short soap_flag;
	a = (struct __GameWS__register_ *)soap_id_enter(soap, "", a, SOAP_TYPE___GameWS__register_, sizeof(struct __GameWS__register_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___GameWS__register_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GameWS__register && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_GameWS__register(soap, "GameWS:register", &a->GameWS__register, ""))
				{	soap_flag_GameWS__register--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___GameWS__register_(struct soap *soap, const struct __GameWS__register_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___GameWS__register_(soap, tag?tag:"-GameWS:register", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __GameWS__register_ * SOAP_FMAC4 soap_get___GameWS__register_(struct soap *soap, struct __GameWS__register_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___GameWS__register_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __GameWS__register_ * SOAP_FMAC2 soap_instantiate___GameWS__register_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___GameWS__register_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___GameWS__register_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __GameWS__register_);
		if (size)
			*size = sizeof(struct __GameWS__register_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __GameWS__register_, n);
		if (size)
			*size = n * sizeof(struct __GameWS__register_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __GameWS__register_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___GameWS__register_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __GameWS__register_ %p -> %p\n", q, p));
	*(struct __GameWS__register_*)p = *(struct __GameWS__register_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___GameWS__getGamesPlayed_(struct soap *soap, struct __GameWS__getGamesPlayed_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->GameWS__getGamesPlayed = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___GameWS__getGamesPlayed_(struct soap *soap, const struct __GameWS__getGamesPlayed_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_GameWS__getGamesPlayed(soap, &a->GameWS__getGamesPlayed);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___GameWS__getGamesPlayed_(struct soap *soap, const char *tag, int id, const struct __GameWS__getGamesPlayed_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_GameWS__getGamesPlayed(soap, "GameWS:getGamesPlayed", -1, &a->GameWS__getGamesPlayed, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __GameWS__getGamesPlayed_ * SOAP_FMAC4 soap_in___GameWS__getGamesPlayed_(struct soap *soap, const char *tag, struct __GameWS__getGamesPlayed_ *a, const char *type)
{
	size_t soap_flag_GameWS__getGamesPlayed = 1;
	short soap_flag;
	a = (struct __GameWS__getGamesPlayed_ *)soap_id_enter(soap, "", a, SOAP_TYPE___GameWS__getGamesPlayed_, sizeof(struct __GameWS__getGamesPlayed_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___GameWS__getGamesPlayed_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GameWS__getGamesPlayed && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_GameWS__getGamesPlayed(soap, "GameWS:getGamesPlayed", &a->GameWS__getGamesPlayed, ""))
				{	soap_flag_GameWS__getGamesPlayed--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___GameWS__getGamesPlayed_(struct soap *soap, const struct __GameWS__getGamesPlayed_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___GameWS__getGamesPlayed_(soap, tag?tag:"-GameWS:getGamesPlayed", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __GameWS__getGamesPlayed_ * SOAP_FMAC4 soap_get___GameWS__getGamesPlayed_(struct soap *soap, struct __GameWS__getGamesPlayed_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___GameWS__getGamesPlayed_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __GameWS__getGamesPlayed_ * SOAP_FMAC2 soap_instantiate___GameWS__getGamesPlayed_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___GameWS__getGamesPlayed_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___GameWS__getGamesPlayed_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __GameWS__getGamesPlayed_);
		if (size)
			*size = sizeof(struct __GameWS__getGamesPlayed_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __GameWS__getGamesPlayed_, n);
		if (size)
			*size = n * sizeof(struct __GameWS__getGamesPlayed_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __GameWS__getGamesPlayed_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___GameWS__getGamesPlayed_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __GameWS__getGamesPlayed_ %p -> %p\n", q, p));
	*(struct __GameWS__getGamesPlayed_*)p = *(struct __GameWS__getGamesPlayed_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___GameWS__getOpponentsIpAddress(struct soap *soap, struct __GameWS__getOpponentsIpAddress *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->GameWS__getOpponentsIpAddress = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___GameWS__getOpponentsIpAddress(struct soap *soap, const struct __GameWS__getOpponentsIpAddress *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_GameWS__getOpponentsIpAddress(soap, &a->GameWS__getOpponentsIpAddress);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___GameWS__getOpponentsIpAddress(struct soap *soap, const char *tag, int id, const struct __GameWS__getOpponentsIpAddress *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_GameWS__getOpponentsIpAddress(soap, "GameWS:getOpponentsIpAddress", -1, &a->GameWS__getOpponentsIpAddress, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __GameWS__getOpponentsIpAddress * SOAP_FMAC4 soap_in___GameWS__getOpponentsIpAddress(struct soap *soap, const char *tag, struct __GameWS__getOpponentsIpAddress *a, const char *type)
{
	size_t soap_flag_GameWS__getOpponentsIpAddress = 1;
	short soap_flag;
	a = (struct __GameWS__getOpponentsIpAddress *)soap_id_enter(soap, "", a, SOAP_TYPE___GameWS__getOpponentsIpAddress, sizeof(struct __GameWS__getOpponentsIpAddress), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___GameWS__getOpponentsIpAddress(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GameWS__getOpponentsIpAddress && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_GameWS__getOpponentsIpAddress(soap, "GameWS:getOpponentsIpAddress", &a->GameWS__getOpponentsIpAddress, ""))
				{	soap_flag_GameWS__getOpponentsIpAddress--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___GameWS__getOpponentsIpAddress(struct soap *soap, const struct __GameWS__getOpponentsIpAddress *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___GameWS__getOpponentsIpAddress(soap, tag?tag:"-GameWS:getOpponentsIpAddress", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __GameWS__getOpponentsIpAddress * SOAP_FMAC4 soap_get___GameWS__getOpponentsIpAddress(struct soap *soap, struct __GameWS__getOpponentsIpAddress *p, const char *tag, const char *type)
{
	if ((p = soap_in___GameWS__getOpponentsIpAddress(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __GameWS__getOpponentsIpAddress * SOAP_FMAC2 soap_instantiate___GameWS__getOpponentsIpAddress(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___GameWS__getOpponentsIpAddress(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___GameWS__getOpponentsIpAddress, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __GameWS__getOpponentsIpAddress);
		if (size)
			*size = sizeof(struct __GameWS__getOpponentsIpAddress);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __GameWS__getOpponentsIpAddress, n);
		if (size)
			*size = n * sizeof(struct __GameWS__getOpponentsIpAddress);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __GameWS__getOpponentsIpAddress*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___GameWS__getOpponentsIpAddress(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __GameWS__getOpponentsIpAddress %p -> %p\n", q, p));
	*(struct __GameWS__getOpponentsIpAddress*)p = *(struct __GameWS__getOpponentsIpAddress*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___GameWS__register(struct soap *soap, struct __GameWS__register *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->GameWS__register = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___GameWS__register(struct soap *soap, const struct __GameWS__register *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_GameWS__register(soap, &a->GameWS__register);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___GameWS__register(struct soap *soap, const char *tag, int id, const struct __GameWS__register *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_GameWS__register(soap, "GameWS:register", -1, &a->GameWS__register, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __GameWS__register * SOAP_FMAC4 soap_in___GameWS__register(struct soap *soap, const char *tag, struct __GameWS__register *a, const char *type)
{
	size_t soap_flag_GameWS__register = 1;
	short soap_flag;
	a = (struct __GameWS__register *)soap_id_enter(soap, "", a, SOAP_TYPE___GameWS__register, sizeof(struct __GameWS__register), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___GameWS__register(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GameWS__register && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_GameWS__register(soap, "GameWS:register", &a->GameWS__register, ""))
				{	soap_flag_GameWS__register--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___GameWS__register(struct soap *soap, const struct __GameWS__register *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___GameWS__register(soap, tag?tag:"-GameWS:register", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __GameWS__register * SOAP_FMAC4 soap_get___GameWS__register(struct soap *soap, struct __GameWS__register *p, const char *tag, const char *type)
{
	if ((p = soap_in___GameWS__register(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __GameWS__register * SOAP_FMAC2 soap_instantiate___GameWS__register(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___GameWS__register(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___GameWS__register, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __GameWS__register);
		if (size)
			*size = sizeof(struct __GameWS__register);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __GameWS__register, n);
		if (size)
			*size = n * sizeof(struct __GameWS__register);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __GameWS__register*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___GameWS__register(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __GameWS__register %p -> %p\n", q, p));
	*(struct __GameWS__register*)p = *(struct __GameWS__register*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___GameWS__getGamesPlayed(struct soap *soap, struct __GameWS__getGamesPlayed *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->GameWS__getGamesPlayed = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___GameWS__getGamesPlayed(struct soap *soap, const struct __GameWS__getGamesPlayed *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_GameWS__getGamesPlayed(soap, &a->GameWS__getGamesPlayed);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___GameWS__getGamesPlayed(struct soap *soap, const char *tag, int id, const struct __GameWS__getGamesPlayed *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_GameWS__getGamesPlayed(soap, "GameWS:getGamesPlayed", -1, &a->GameWS__getGamesPlayed, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __GameWS__getGamesPlayed * SOAP_FMAC4 soap_in___GameWS__getGamesPlayed(struct soap *soap, const char *tag, struct __GameWS__getGamesPlayed *a, const char *type)
{
	size_t soap_flag_GameWS__getGamesPlayed = 1;
	short soap_flag;
	a = (struct __GameWS__getGamesPlayed *)soap_id_enter(soap, "", a, SOAP_TYPE___GameWS__getGamesPlayed, sizeof(struct __GameWS__getGamesPlayed), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___GameWS__getGamesPlayed(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GameWS__getGamesPlayed && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_GameWS__getGamesPlayed(soap, "GameWS:getGamesPlayed", &a->GameWS__getGamesPlayed, ""))
				{	soap_flag_GameWS__getGamesPlayed--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___GameWS__getGamesPlayed(struct soap *soap, const struct __GameWS__getGamesPlayed *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___GameWS__getGamesPlayed(soap, tag?tag:"-GameWS:getGamesPlayed", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __GameWS__getGamesPlayed * SOAP_FMAC4 soap_get___GameWS__getGamesPlayed(struct soap *soap, struct __GameWS__getGamesPlayed *p, const char *tag, const char *type)
{
	if ((p = soap_in___GameWS__getGamesPlayed(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __GameWS__getGamesPlayed * SOAP_FMAC2 soap_instantiate___GameWS__getGamesPlayed(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___GameWS__getGamesPlayed(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___GameWS__getGamesPlayed, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __GameWS__getGamesPlayed);
		if (size)
			*size = sizeof(struct __GameWS__getGamesPlayed);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __GameWS__getGamesPlayed, n);
		if (size)
			*size = n * sizeof(struct __GameWS__getGamesPlayed);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __GameWS__getGamesPlayed*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___GameWS__getGamesPlayed(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __GameWS__getGamesPlayed %p -> %p\n", q, p));
	*(struct __GameWS__getGamesPlayed*)p = *(struct __GameWS__getGamesPlayed*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_GameWS__getOpponentsIpAddressResponse(struct soap *soap, _GameWS__getOpponentsIpAddressResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__GameWS__getOpponentsIpAddressResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_GameWS__getOpponentsIpAddressResponse(struct soap *soap, const char *tag, int id, _GameWS__getOpponentsIpAddressResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__GameWS__getOpponentsIpAddressResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _GameWS__getOpponentsIpAddressResponse ** SOAP_FMAC4 soap_in_PointerTo_GameWS__getOpponentsIpAddressResponse(struct soap *soap, const char *tag, _GameWS__getOpponentsIpAddressResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_GameWS__getOpponentsIpAddressResponse **)soap_malloc(soap, sizeof(_GameWS__getOpponentsIpAddressResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_GameWS__getOpponentsIpAddressResponse *)soap_instantiate__GameWS__getOpponentsIpAddressResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_GameWS__getOpponentsIpAddressResponse ** p = (_GameWS__getOpponentsIpAddressResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__GameWS__getOpponentsIpAddressResponse, sizeof(_GameWS__getOpponentsIpAddressResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_GameWS__getOpponentsIpAddressResponse(struct soap *soap, _GameWS__getOpponentsIpAddressResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_GameWS__getOpponentsIpAddressResponse);
	if (soap_out_PointerTo_GameWS__getOpponentsIpAddressResponse(soap, tag?tag:"GameWS:getOpponentsIpAddressResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _GameWS__getOpponentsIpAddressResponse ** SOAP_FMAC4 soap_get_PointerTo_GameWS__getOpponentsIpAddressResponse(struct soap *soap, _GameWS__getOpponentsIpAddressResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_GameWS__getOpponentsIpAddressResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_GameWS__getOpponentsIpAddress(struct soap *soap, _GameWS__getOpponentsIpAddress *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__GameWS__getOpponentsIpAddress))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_GameWS__getOpponentsIpAddress(struct soap *soap, const char *tag, int id, _GameWS__getOpponentsIpAddress *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__GameWS__getOpponentsIpAddress);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _GameWS__getOpponentsIpAddress ** SOAP_FMAC4 soap_in_PointerTo_GameWS__getOpponentsIpAddress(struct soap *soap, const char *tag, _GameWS__getOpponentsIpAddress **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_GameWS__getOpponentsIpAddress **)soap_malloc(soap, sizeof(_GameWS__getOpponentsIpAddress *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_GameWS__getOpponentsIpAddress *)soap_instantiate__GameWS__getOpponentsIpAddress(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_GameWS__getOpponentsIpAddress ** p = (_GameWS__getOpponentsIpAddress **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__GameWS__getOpponentsIpAddress, sizeof(_GameWS__getOpponentsIpAddress), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_GameWS__getOpponentsIpAddress(struct soap *soap, _GameWS__getOpponentsIpAddress *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_GameWS__getOpponentsIpAddress);
	if (soap_out_PointerTo_GameWS__getOpponentsIpAddress(soap, tag?tag:"GameWS:getOpponentsIpAddress", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _GameWS__getOpponentsIpAddress ** SOAP_FMAC4 soap_get_PointerTo_GameWS__getOpponentsIpAddress(struct soap *soap, _GameWS__getOpponentsIpAddress **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_GameWS__getOpponentsIpAddress(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_GameWS__registerResponse(struct soap *soap, _GameWS__registerResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__GameWS__registerResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_GameWS__registerResponse(struct soap *soap, const char *tag, int id, _GameWS__registerResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__GameWS__registerResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _GameWS__registerResponse ** SOAP_FMAC4 soap_in_PointerTo_GameWS__registerResponse(struct soap *soap, const char *tag, _GameWS__registerResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_GameWS__registerResponse **)soap_malloc(soap, sizeof(_GameWS__registerResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_GameWS__registerResponse *)soap_instantiate__GameWS__registerResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_GameWS__registerResponse ** p = (_GameWS__registerResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__GameWS__registerResponse, sizeof(_GameWS__registerResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_GameWS__registerResponse(struct soap *soap, _GameWS__registerResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_GameWS__registerResponse);
	if (soap_out_PointerTo_GameWS__registerResponse(soap, tag?tag:"GameWS:registerResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _GameWS__registerResponse ** SOAP_FMAC4 soap_get_PointerTo_GameWS__registerResponse(struct soap *soap, _GameWS__registerResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_GameWS__registerResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_GameWS__register(struct soap *soap, _GameWS__register *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__GameWS__register))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_GameWS__register(struct soap *soap, const char *tag, int id, _GameWS__register *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__GameWS__register);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _GameWS__register ** SOAP_FMAC4 soap_in_PointerTo_GameWS__register(struct soap *soap, const char *tag, _GameWS__register **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_GameWS__register **)soap_malloc(soap, sizeof(_GameWS__register *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_GameWS__register *)soap_instantiate__GameWS__register(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_GameWS__register ** p = (_GameWS__register **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__GameWS__register, sizeof(_GameWS__register), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_GameWS__register(struct soap *soap, _GameWS__register *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_GameWS__register);
	if (soap_out_PointerTo_GameWS__register(soap, tag?tag:"GameWS:register", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _GameWS__register ** SOAP_FMAC4 soap_get_PointerTo_GameWS__register(struct soap *soap, _GameWS__register **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_GameWS__register(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_GameWS__getGamesPlayedResponse(struct soap *soap, _GameWS__getGamesPlayedResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__GameWS__getGamesPlayedResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_GameWS__getGamesPlayedResponse(struct soap *soap, const char *tag, int id, _GameWS__getGamesPlayedResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__GameWS__getGamesPlayedResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _GameWS__getGamesPlayedResponse ** SOAP_FMAC4 soap_in_PointerTo_GameWS__getGamesPlayedResponse(struct soap *soap, const char *tag, _GameWS__getGamesPlayedResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_GameWS__getGamesPlayedResponse **)soap_malloc(soap, sizeof(_GameWS__getGamesPlayedResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_GameWS__getGamesPlayedResponse *)soap_instantiate__GameWS__getGamesPlayedResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_GameWS__getGamesPlayedResponse ** p = (_GameWS__getGamesPlayedResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__GameWS__getGamesPlayedResponse, sizeof(_GameWS__getGamesPlayedResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_GameWS__getGamesPlayedResponse(struct soap *soap, _GameWS__getGamesPlayedResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_GameWS__getGamesPlayedResponse);
	if (soap_out_PointerTo_GameWS__getGamesPlayedResponse(soap, tag?tag:"GameWS:getGamesPlayedResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _GameWS__getGamesPlayedResponse ** SOAP_FMAC4 soap_get_PointerTo_GameWS__getGamesPlayedResponse(struct soap *soap, _GameWS__getGamesPlayedResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_GameWS__getGamesPlayedResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_GameWS__getGamesPlayed(struct soap *soap, _GameWS__getGamesPlayed *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__GameWS__getGamesPlayed))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_GameWS__getGamesPlayed(struct soap *soap, const char *tag, int id, _GameWS__getGamesPlayed *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__GameWS__getGamesPlayed);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _GameWS__getGamesPlayed ** SOAP_FMAC4 soap_in_PointerTo_GameWS__getGamesPlayed(struct soap *soap, const char *tag, _GameWS__getGamesPlayed **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_GameWS__getGamesPlayed **)soap_malloc(soap, sizeof(_GameWS__getGamesPlayed *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_GameWS__getGamesPlayed *)soap_instantiate__GameWS__getGamesPlayed(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_GameWS__getGamesPlayed ** p = (_GameWS__getGamesPlayed **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__GameWS__getGamesPlayed, sizeof(_GameWS__getGamesPlayed), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_GameWS__getGamesPlayed(struct soap *soap, _GameWS__getGamesPlayed *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_GameWS__getGamesPlayed);
	if (soap_out_PointerTo_GameWS__getGamesPlayed(soap, tag?tag:"GameWS:getGamesPlayed", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _GameWS__getGamesPlayed ** SOAP_FMAC4 soap_get_PointerTo_GameWS__getGamesPlayed(struct soap *soap, _GameWS__getGamesPlayed **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_GameWS__getGamesPlayed(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToGameWS__ArrayOfString(struct soap *soap, GameWS__ArrayOfString *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_GameWS__ArrayOfString))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToGameWS__ArrayOfString(struct soap *soap, const char *tag, int id, GameWS__ArrayOfString *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_GameWS__ArrayOfString);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 GameWS__ArrayOfString ** SOAP_FMAC4 soap_in_PointerToGameWS__ArrayOfString(struct soap *soap, const char *tag, GameWS__ArrayOfString **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (GameWS__ArrayOfString **)soap_malloc(soap, sizeof(GameWS__ArrayOfString *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (GameWS__ArrayOfString *)soap_instantiate_GameWS__ArrayOfString(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	GameWS__ArrayOfString ** p = (GameWS__ArrayOfString **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_GameWS__ArrayOfString, sizeof(GameWS__ArrayOfString), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToGameWS__ArrayOfString(struct soap *soap, GameWS__ArrayOfString *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToGameWS__ArrayOfString);
	if (soap_out_PointerToGameWS__ArrayOfString(soap, tag?tag:"GameWS:ArrayOfString", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 GameWS__ArrayOfString ** SOAP_FMAC4 soap_get_PointerToGameWS__ArrayOfString(struct soap *soap, GameWS__ArrayOfString **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToGameWS__ArrayOfString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap *soap, const std::vector<std::string >*a)
{
#ifndef WITH_NOIDREF
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_std__string(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, int id, const std::vector<std::string >*a, const char *type)
{
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_std__string(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, std::vector<std::string >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	std::string n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		soap_default_std__string(soap, &n);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_std__string, SOAP_TYPE_std__vectorTemplateOfstd__string, sizeof(std::string), 0))
				break;
			if (!soap_in_std__string(soap, tag, NULL, "xsd:string"))
				break;
		}
		else if (!soap_in_std__string(soap, tag, &n, "xsd:string"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfstd__string(soap, -1)))
			return NULL;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfstd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfstd__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<std::string >);
		if (size)
			*size = sizeof(std::vector<std::string >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<std::string >, n);
		if (size)
			*size = n * sizeof(std::vector<std::string >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<std::string >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<std::string > %p -> %p\n", q, p));
	*(std::vector<std::string >*)p = *(std::vector<std::string >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
