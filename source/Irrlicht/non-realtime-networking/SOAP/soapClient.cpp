/* soapClient.cpp
   Generated by gSOAP 2.8.17r from server.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.17r 2014-03-26 17:04:09 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call___GameWS__getGamesPlayed(struct soap *soap, const char *soap_endpoint, const char *soap_action, _GameWS__getGamesPlayed *GameWS__getGamesPlayed, _GameWS__getGamesPlayedResponse *GameWS__getGamesPlayedResponse)
{	struct __GameWS__getGamesPlayed soap_tmp___GameWS__getGamesPlayed;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8/MasterGameServer/GameWS.asmx";
	if (soap_action == NULL)
		soap_action = "http://non-real-time-networking-web-service.psi/getGamesPlayed";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___GameWS__getGamesPlayed.GameWS__getGamesPlayed = GameWS__getGamesPlayed;
	soap_serializeheader(soap);
	soap_serialize___GameWS__getGamesPlayed(soap, &soap_tmp___GameWS__getGamesPlayed);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___GameWS__getGamesPlayed(soap, &soap_tmp___GameWS__getGamesPlayed, "-GameWS:getGamesPlayed", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___GameWS__getGamesPlayed(soap, &soap_tmp___GameWS__getGamesPlayed, "-GameWS:getGamesPlayed", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!GameWS__getGamesPlayedResponse)
		return soap_closesock(soap);
	GameWS__getGamesPlayedResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	GameWS__getGamesPlayedResponse->soap_get(soap, "GameWS:getGamesPlayedResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___GameWS__register(struct soap *soap, const char *soap_endpoint, const char *soap_action, _GameWS__register *GameWS__register, _GameWS__registerResponse *GameWS__registerResponse)
{	struct __GameWS__register soap_tmp___GameWS__register;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8/MasterGameServer/GameWS.asmx";
	if (soap_action == NULL)
		soap_action = "http://non-real-time-networking-web-service.psi/register";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___GameWS__register.GameWS__register = GameWS__register;
	soap_serializeheader(soap);
	soap_serialize___GameWS__register(soap, &soap_tmp___GameWS__register);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___GameWS__register(soap, &soap_tmp___GameWS__register, "-GameWS:register", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___GameWS__register(soap, &soap_tmp___GameWS__register, "-GameWS:register", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!GameWS__registerResponse)
		return soap_closesock(soap);
	GameWS__registerResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	GameWS__registerResponse->soap_get(soap, "GameWS:registerResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___GameWS__getOpponentsIpAddress(struct soap *soap, const char *soap_endpoint, const char *soap_action, _GameWS__getOpponentsIpAddress *GameWS__getOpponentsIpAddress, _GameWS__getOpponentsIpAddressResponse *GameWS__getOpponentsIpAddressResponse)
{	struct __GameWS__getOpponentsIpAddress soap_tmp___GameWS__getOpponentsIpAddress;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8/MasterGameServer/GameWS.asmx";
	if (soap_action == NULL)
		soap_action = "http://non-real-time-networking-web-service.psi/getOpponentsIpAddress";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___GameWS__getOpponentsIpAddress.GameWS__getOpponentsIpAddress = GameWS__getOpponentsIpAddress;
	soap_serializeheader(soap);
	soap_serialize___GameWS__getOpponentsIpAddress(soap, &soap_tmp___GameWS__getOpponentsIpAddress);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___GameWS__getOpponentsIpAddress(soap, &soap_tmp___GameWS__getOpponentsIpAddress, "-GameWS:getOpponentsIpAddress", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___GameWS__getOpponentsIpAddress(soap, &soap_tmp___GameWS__getOpponentsIpAddress, "-GameWS:getOpponentsIpAddress", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!GameWS__getOpponentsIpAddressResponse)
		return soap_closesock(soap);
	GameWS__getOpponentsIpAddressResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	GameWS__getOpponentsIpAddressResponse->soap_get(soap, "GameWS:getOpponentsIpAddressResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___GameWS__getGamesPlayed_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _GameWS__getGamesPlayed *GameWS__getGamesPlayed, _GameWS__getGamesPlayedResponse *GameWS__getGamesPlayedResponse)
{	struct __GameWS__getGamesPlayed_ soap_tmp___GameWS__getGamesPlayed_;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8/MasterGameServer/GameWS.asmx";
	if (soap_action == NULL)
		soap_action = "http://non-real-time-networking-web-service.psi/getGamesPlayed";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___GameWS__getGamesPlayed_.GameWS__getGamesPlayed = GameWS__getGamesPlayed;
	soap_serializeheader(soap);
	soap_serialize___GameWS__getGamesPlayed_(soap, &soap_tmp___GameWS__getGamesPlayed_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___GameWS__getGamesPlayed_(soap, &soap_tmp___GameWS__getGamesPlayed_, "-GameWS:getGamesPlayed", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___GameWS__getGamesPlayed_(soap, &soap_tmp___GameWS__getGamesPlayed_, "-GameWS:getGamesPlayed", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!GameWS__getGamesPlayedResponse)
		return soap_closesock(soap);
	GameWS__getGamesPlayedResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	GameWS__getGamesPlayedResponse->soap_get(soap, "GameWS:getGamesPlayedResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___GameWS__register_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _GameWS__register *GameWS__register, _GameWS__registerResponse *GameWS__registerResponse)
{	struct __GameWS__register_ soap_tmp___GameWS__register_;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8/MasterGameServer/GameWS.asmx";
	if (soap_action == NULL)
		soap_action = "http://non-real-time-networking-web-service.psi/register";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___GameWS__register_.GameWS__register = GameWS__register;
	soap_serializeheader(soap);
	soap_serialize___GameWS__register_(soap, &soap_tmp___GameWS__register_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___GameWS__register_(soap, &soap_tmp___GameWS__register_, "-GameWS:register", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___GameWS__register_(soap, &soap_tmp___GameWS__register_, "-GameWS:register", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!GameWS__registerResponse)
		return soap_closesock(soap);
	GameWS__registerResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	GameWS__registerResponse->soap_get(soap, "GameWS:registerResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___GameWS__getOpponentsIpAddress_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _GameWS__getOpponentsIpAddress *GameWS__getOpponentsIpAddress, _GameWS__getOpponentsIpAddressResponse *GameWS__getOpponentsIpAddressResponse)
{	struct __GameWS__getOpponentsIpAddress_ soap_tmp___GameWS__getOpponentsIpAddress_;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8/MasterGameServer/GameWS.asmx";
	if (soap_action == NULL)
		soap_action = "http://non-real-time-networking-web-service.psi/getOpponentsIpAddress";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___GameWS__getOpponentsIpAddress_.GameWS__getOpponentsIpAddress = GameWS__getOpponentsIpAddress;
	soap_serializeheader(soap);
	soap_serialize___GameWS__getOpponentsIpAddress_(soap, &soap_tmp___GameWS__getOpponentsIpAddress_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___GameWS__getOpponentsIpAddress_(soap, &soap_tmp___GameWS__getOpponentsIpAddress_, "-GameWS:getOpponentsIpAddress", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___GameWS__getOpponentsIpAddress_(soap, &soap_tmp___GameWS__getOpponentsIpAddress_, "-GameWS:getOpponentsIpAddress", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!GameWS__getOpponentsIpAddressResponse)
		return soap_closesock(soap);
	GameWS__getOpponentsIpAddressResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	GameWS__getOpponentsIpAddressResponse->soap_get(soap, "GameWS:getOpponentsIpAddressResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
