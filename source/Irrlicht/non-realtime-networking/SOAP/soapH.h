/* soapH.h
   Generated by gSOAP 2.8.17r from server.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data),0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data),0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data),0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__GameWS__getOpponentsIpAddressResponse
#define SOAP_TYPE__GameWS__getOpponentsIpAddressResponse (14)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__GameWS__getOpponentsIpAddressResponse(struct soap*, const char*, int, const _GameWS__getOpponentsIpAddressResponse *, const char*);
SOAP_FMAC3 _GameWS__getOpponentsIpAddressResponse * SOAP_FMAC4 soap_in__GameWS__getOpponentsIpAddressResponse(struct soap*, const char*, _GameWS__getOpponentsIpAddressResponse *, const char*);

#ifndef soap_write__GameWS__getOpponentsIpAddressResponse
#define soap_write__GameWS__getOpponentsIpAddressResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "GameWS:getOpponentsIpAddressResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _GameWS__getOpponentsIpAddressResponse * SOAP_FMAC4 soap_get__GameWS__getOpponentsIpAddressResponse(struct soap*, _GameWS__getOpponentsIpAddressResponse *, const char*, const char*);

#ifndef soap_read__GameWS__getOpponentsIpAddressResponse
#define soap_read__GameWS__getOpponentsIpAddressResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__GameWS__getOpponentsIpAddressResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _GameWS__getOpponentsIpAddressResponse * SOAP_FMAC2 soap_instantiate__GameWS__getOpponentsIpAddressResponse(struct soap*, int, const char*, const char*, size_t*);

inline _GameWS__getOpponentsIpAddressResponse * soap_new__GameWS__getOpponentsIpAddressResponse(struct soap *soap, int n = -1) { return soap_instantiate__GameWS__getOpponentsIpAddressResponse(soap, n, NULL, NULL, NULL); }

inline _GameWS__getOpponentsIpAddressResponse * soap_new_req__GameWS__getOpponentsIpAddressResponse(struct soap *soap) { _GameWS__getOpponentsIpAddressResponse *_p = soap_instantiate__GameWS__getOpponentsIpAddressResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _GameWS__getOpponentsIpAddressResponse * soap_new_set__GameWS__getOpponentsIpAddressResponse(struct soap *soap, std::string *getOpponentsIpAddressResult) { _GameWS__getOpponentsIpAddressResponse *_p = soap_instantiate__GameWS__getOpponentsIpAddressResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_GameWS__getOpponentsIpAddressResponse::getOpponentsIpAddressResult = getOpponentsIpAddressResult; } return _p; }

inline void soap_delete__GameWS__getOpponentsIpAddressResponse(struct soap *soap, _GameWS__getOpponentsIpAddressResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__GameWS__getOpponentsIpAddressResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__GameWS__getOpponentsIpAddress
#define SOAP_TYPE__GameWS__getOpponentsIpAddress (13)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__GameWS__getOpponentsIpAddress(struct soap*, const char*, int, const _GameWS__getOpponentsIpAddress *, const char*);
SOAP_FMAC3 _GameWS__getOpponentsIpAddress * SOAP_FMAC4 soap_in__GameWS__getOpponentsIpAddress(struct soap*, const char*, _GameWS__getOpponentsIpAddress *, const char*);

#ifndef soap_write__GameWS__getOpponentsIpAddress
#define soap_write__GameWS__getOpponentsIpAddress(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "GameWS:getOpponentsIpAddress", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _GameWS__getOpponentsIpAddress * SOAP_FMAC4 soap_get__GameWS__getOpponentsIpAddress(struct soap*, _GameWS__getOpponentsIpAddress *, const char*, const char*);

#ifndef soap_read__GameWS__getOpponentsIpAddress
#define soap_read__GameWS__getOpponentsIpAddress(soap, data) ( soap_begin_recv(soap) || !soap_get__GameWS__getOpponentsIpAddress(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _GameWS__getOpponentsIpAddress * SOAP_FMAC2 soap_instantiate__GameWS__getOpponentsIpAddress(struct soap*, int, const char*, const char*, size_t*);

inline _GameWS__getOpponentsIpAddress * soap_new__GameWS__getOpponentsIpAddress(struct soap *soap, int n = -1) { return soap_instantiate__GameWS__getOpponentsIpAddress(soap, n, NULL, NULL, NULL); }

inline _GameWS__getOpponentsIpAddress * soap_new_req__GameWS__getOpponentsIpAddress(struct soap *soap, int sessionId) { _GameWS__getOpponentsIpAddress *_p = soap_instantiate__GameWS__getOpponentsIpAddress(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_GameWS__getOpponentsIpAddress::sessionId = sessionId; } return _p; }

inline _GameWS__getOpponentsIpAddress * soap_new_set__GameWS__getOpponentsIpAddress(struct soap *soap, std::string *gameName, int sessionId) { _GameWS__getOpponentsIpAddress *_p = soap_instantiate__GameWS__getOpponentsIpAddress(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_GameWS__getOpponentsIpAddress::gameName = gameName; _p->_GameWS__getOpponentsIpAddress::sessionId = sessionId; } return _p; }

inline void soap_delete__GameWS__getOpponentsIpAddress(struct soap *soap, _GameWS__getOpponentsIpAddress *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__GameWS__getOpponentsIpAddress(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__GameWS__registerResponse
#define SOAP_TYPE__GameWS__registerResponse (12)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__GameWS__registerResponse(struct soap*, const char*, int, const _GameWS__registerResponse *, const char*);
SOAP_FMAC3 _GameWS__registerResponse * SOAP_FMAC4 soap_in__GameWS__registerResponse(struct soap*, const char*, _GameWS__registerResponse *, const char*);

#ifndef soap_write__GameWS__registerResponse
#define soap_write__GameWS__registerResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "GameWS:registerResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _GameWS__registerResponse * SOAP_FMAC4 soap_get__GameWS__registerResponse(struct soap*, _GameWS__registerResponse *, const char*, const char*);

#ifndef soap_read__GameWS__registerResponse
#define soap_read__GameWS__registerResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__GameWS__registerResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _GameWS__registerResponse * SOAP_FMAC2 soap_instantiate__GameWS__registerResponse(struct soap*, int, const char*, const char*, size_t*);

inline _GameWS__registerResponse * soap_new__GameWS__registerResponse(struct soap *soap, int n = -1) { return soap_instantiate__GameWS__registerResponse(soap, n, NULL, NULL, NULL); }

inline _GameWS__registerResponse * soap_new_req__GameWS__registerResponse(struct soap *soap, int registerResult) { _GameWS__registerResponse *_p = soap_instantiate__GameWS__registerResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_GameWS__registerResponse::registerResult = registerResult; } return _p; }

inline _GameWS__registerResponse * soap_new_set__GameWS__registerResponse(struct soap *soap, int registerResult) { _GameWS__registerResponse *_p = soap_instantiate__GameWS__registerResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_GameWS__registerResponse::registerResult = registerResult; } return _p; }

inline void soap_delete__GameWS__registerResponse(struct soap *soap, _GameWS__registerResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__GameWS__registerResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__GameWS__register
#define SOAP_TYPE__GameWS__register (11)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__GameWS__register(struct soap*, const char*, int, const _GameWS__register *, const char*);
SOAP_FMAC3 _GameWS__register * SOAP_FMAC4 soap_in__GameWS__register(struct soap*, const char*, _GameWS__register *, const char*);

#ifndef soap_write__GameWS__register
#define soap_write__GameWS__register(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "GameWS:register", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _GameWS__register * SOAP_FMAC4 soap_get__GameWS__register(struct soap*, _GameWS__register *, const char*, const char*);

#ifndef soap_read__GameWS__register
#define soap_read__GameWS__register(soap, data) ( soap_begin_recv(soap) || !soap_get__GameWS__register(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _GameWS__register * SOAP_FMAC2 soap_instantiate__GameWS__register(struct soap*, int, const char*, const char*, size_t*);

inline _GameWS__register * soap_new__GameWS__register(struct soap *soap, int n = -1) { return soap_instantiate__GameWS__register(soap, n, NULL, NULL, NULL); }

inline _GameWS__register * soap_new_req__GameWS__register(struct soap *soap) { _GameWS__register *_p = soap_instantiate__GameWS__register(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _GameWS__register * soap_new_set__GameWS__register(struct soap *soap, std::string *gameName) { _GameWS__register *_p = soap_instantiate__GameWS__register(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_GameWS__register::gameName = gameName; } return _p; }

inline void soap_delete__GameWS__register(struct soap *soap, _GameWS__register *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__GameWS__register(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__GameWS__getGamesPlayedResponse
#define SOAP_TYPE__GameWS__getGamesPlayedResponse (10)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__GameWS__getGamesPlayedResponse(struct soap*, const char*, int, const _GameWS__getGamesPlayedResponse *, const char*);
SOAP_FMAC3 _GameWS__getGamesPlayedResponse * SOAP_FMAC4 soap_in__GameWS__getGamesPlayedResponse(struct soap*, const char*, _GameWS__getGamesPlayedResponse *, const char*);

#ifndef soap_write__GameWS__getGamesPlayedResponse
#define soap_write__GameWS__getGamesPlayedResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "GameWS:getGamesPlayedResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _GameWS__getGamesPlayedResponse * SOAP_FMAC4 soap_get__GameWS__getGamesPlayedResponse(struct soap*, _GameWS__getGamesPlayedResponse *, const char*, const char*);

#ifndef soap_read__GameWS__getGamesPlayedResponse
#define soap_read__GameWS__getGamesPlayedResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__GameWS__getGamesPlayedResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _GameWS__getGamesPlayedResponse * SOAP_FMAC2 soap_instantiate__GameWS__getGamesPlayedResponse(struct soap*, int, const char*, const char*, size_t*);

inline _GameWS__getGamesPlayedResponse * soap_new__GameWS__getGamesPlayedResponse(struct soap *soap, int n = -1) { return soap_instantiate__GameWS__getGamesPlayedResponse(soap, n, NULL, NULL, NULL); }

inline _GameWS__getGamesPlayedResponse * soap_new_req__GameWS__getGamesPlayedResponse(struct soap *soap) { _GameWS__getGamesPlayedResponse *_p = soap_instantiate__GameWS__getGamesPlayedResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _GameWS__getGamesPlayedResponse * soap_new_set__GameWS__getGamesPlayedResponse(struct soap *soap, GameWS__ArrayOfString *getGamesPlayedResult) { _GameWS__getGamesPlayedResponse *_p = soap_instantiate__GameWS__getGamesPlayedResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_GameWS__getGamesPlayedResponse::getGamesPlayedResult = getGamesPlayedResult; } return _p; }

inline void soap_delete__GameWS__getGamesPlayedResponse(struct soap *soap, _GameWS__getGamesPlayedResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__GameWS__getGamesPlayedResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__GameWS__getGamesPlayed
#define SOAP_TYPE__GameWS__getGamesPlayed (9)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__GameWS__getGamesPlayed(struct soap*, const char*, int, const _GameWS__getGamesPlayed *, const char*);
SOAP_FMAC3 _GameWS__getGamesPlayed * SOAP_FMAC4 soap_in__GameWS__getGamesPlayed(struct soap*, const char*, _GameWS__getGamesPlayed *, const char*);

#ifndef soap_write__GameWS__getGamesPlayed
#define soap_write__GameWS__getGamesPlayed(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "GameWS:getGamesPlayed", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _GameWS__getGamesPlayed * SOAP_FMAC4 soap_get__GameWS__getGamesPlayed(struct soap*, _GameWS__getGamesPlayed *, const char*, const char*);

#ifndef soap_read__GameWS__getGamesPlayed
#define soap_read__GameWS__getGamesPlayed(soap, data) ( soap_begin_recv(soap) || !soap_get__GameWS__getGamesPlayed(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _GameWS__getGamesPlayed * SOAP_FMAC2 soap_instantiate__GameWS__getGamesPlayed(struct soap*, int, const char*, const char*, size_t*);

inline _GameWS__getGamesPlayed * soap_new__GameWS__getGamesPlayed(struct soap *soap, int n = -1) { return soap_instantiate__GameWS__getGamesPlayed(soap, n, NULL, NULL, NULL); }

inline _GameWS__getGamesPlayed * soap_new_req__GameWS__getGamesPlayed(struct soap *soap) { _GameWS__getGamesPlayed *_p = soap_instantiate__GameWS__getGamesPlayed(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _GameWS__getGamesPlayed * soap_new_set__GameWS__getGamesPlayed(struct soap *soap) { _GameWS__getGamesPlayed *_p = soap_instantiate__GameWS__getGamesPlayed(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__GameWS__getGamesPlayed(struct soap *soap, _GameWS__getGamesPlayed *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__GameWS__getGamesPlayed(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_GameWS__ArrayOfString
#define SOAP_TYPE_GameWS__ArrayOfString (8)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_GameWS__ArrayOfString(struct soap*, const char*, int, const GameWS__ArrayOfString *, const char*);
SOAP_FMAC3 GameWS__ArrayOfString * SOAP_FMAC4 soap_in_GameWS__ArrayOfString(struct soap*, const char*, GameWS__ArrayOfString *, const char*);

#ifndef soap_write_GameWS__ArrayOfString
#define soap_write_GameWS__ArrayOfString(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "GameWS:ArrayOfString", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 GameWS__ArrayOfString * SOAP_FMAC4 soap_get_GameWS__ArrayOfString(struct soap*, GameWS__ArrayOfString *, const char*, const char*);

#ifndef soap_read_GameWS__ArrayOfString
#define soap_read_GameWS__ArrayOfString(soap, data) ( soap_begin_recv(soap) || !soap_get_GameWS__ArrayOfString(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 GameWS__ArrayOfString * SOAP_FMAC2 soap_instantiate_GameWS__ArrayOfString(struct soap*, int, const char*, const char*, size_t*);

inline GameWS__ArrayOfString * soap_new_GameWS__ArrayOfString(struct soap *soap, int n = -1) { return soap_instantiate_GameWS__ArrayOfString(soap, n, NULL, NULL, NULL); }

inline GameWS__ArrayOfString * soap_new_req_GameWS__ArrayOfString(struct soap *soap) { GameWS__ArrayOfString *_p = soap_instantiate_GameWS__ArrayOfString(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline GameWS__ArrayOfString * soap_new_set_GameWS__ArrayOfString(struct soap *soap, std::vector<std::string >& string) { GameWS__ArrayOfString *_p = soap_instantiate_GameWS__ArrayOfString(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->GameWS__ArrayOfString::string = string; } return _p; }

inline void soap_delete_GameWS__ArrayOfString(struct soap *soap, GameWS__ArrayOfString *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_GameWS__ArrayOfString(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (45)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data),0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (44)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data),0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data),0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data),0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data),0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE___GameWS__getOpponentsIpAddress_
#define SOAP_TYPE___GameWS__getOpponentsIpAddress_ (37)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___GameWS__getOpponentsIpAddress_(struct soap*, struct __GameWS__getOpponentsIpAddress_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___GameWS__getOpponentsIpAddress_(struct soap*, const struct __GameWS__getOpponentsIpAddress_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___GameWS__getOpponentsIpAddress_(struct soap*, const char*, int, const struct __GameWS__getOpponentsIpAddress_ *, const char*);
SOAP_FMAC3 struct __GameWS__getOpponentsIpAddress_ * SOAP_FMAC4 soap_in___GameWS__getOpponentsIpAddress_(struct soap*, const char*, struct __GameWS__getOpponentsIpAddress_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___GameWS__getOpponentsIpAddress_(struct soap*, const struct __GameWS__getOpponentsIpAddress_ *, const char*, const char*);

#ifndef soap_write___GameWS__getOpponentsIpAddress_
#define soap_write___GameWS__getOpponentsIpAddress_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___GameWS__getOpponentsIpAddress_(soap, data),0) || soap_put___GameWS__getOpponentsIpAddress_(soap, data, "-GameWS:getOpponentsIpAddress", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __GameWS__getOpponentsIpAddress_ * SOAP_FMAC4 soap_get___GameWS__getOpponentsIpAddress_(struct soap*, struct __GameWS__getOpponentsIpAddress_ *, const char*, const char*);

#ifndef soap_read___GameWS__getOpponentsIpAddress_
#define soap_read___GameWS__getOpponentsIpAddress_(soap, data) ( soap_begin_recv(soap) || !soap_get___GameWS__getOpponentsIpAddress_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __GameWS__getOpponentsIpAddress_ * SOAP_FMAC2 soap_instantiate___GameWS__getOpponentsIpAddress_(struct soap*, int, const char*, const char*, size_t*);

inline struct __GameWS__getOpponentsIpAddress_ * soap_new___GameWS__getOpponentsIpAddress_(struct soap *soap, int n = -1) { return soap_instantiate___GameWS__getOpponentsIpAddress_(soap, n, NULL, NULL, NULL); }

inline struct __GameWS__getOpponentsIpAddress_ * soap_new_req___GameWS__getOpponentsIpAddress_(struct soap *soap) { struct __GameWS__getOpponentsIpAddress_ *_p = soap_instantiate___GameWS__getOpponentsIpAddress_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___GameWS__getOpponentsIpAddress_(soap, _p); } return _p; }

inline struct __GameWS__getOpponentsIpAddress_ * soap_new_set___GameWS__getOpponentsIpAddress_(struct soap *soap, _GameWS__getOpponentsIpAddress *GameWS__getOpponentsIpAddress) { struct __GameWS__getOpponentsIpAddress_ *_p = soap_instantiate___GameWS__getOpponentsIpAddress_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___GameWS__getOpponentsIpAddress_(soap, _p); _p->GameWS__getOpponentsIpAddress = GameWS__getOpponentsIpAddress; } return _p; }

inline void soap_delete___GameWS__getOpponentsIpAddress_(struct soap *soap, struct __GameWS__getOpponentsIpAddress_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___GameWS__getOpponentsIpAddress_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___GameWS__register_
#define SOAP_TYPE___GameWS__register_ (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___GameWS__register_(struct soap*, struct __GameWS__register_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___GameWS__register_(struct soap*, const struct __GameWS__register_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___GameWS__register_(struct soap*, const char*, int, const struct __GameWS__register_ *, const char*);
SOAP_FMAC3 struct __GameWS__register_ * SOAP_FMAC4 soap_in___GameWS__register_(struct soap*, const char*, struct __GameWS__register_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___GameWS__register_(struct soap*, const struct __GameWS__register_ *, const char*, const char*);

#ifndef soap_write___GameWS__register_
#define soap_write___GameWS__register_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___GameWS__register_(soap, data),0) || soap_put___GameWS__register_(soap, data, "-GameWS:register", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __GameWS__register_ * SOAP_FMAC4 soap_get___GameWS__register_(struct soap*, struct __GameWS__register_ *, const char*, const char*);

#ifndef soap_read___GameWS__register_
#define soap_read___GameWS__register_(soap, data) ( soap_begin_recv(soap) || !soap_get___GameWS__register_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __GameWS__register_ * SOAP_FMAC2 soap_instantiate___GameWS__register_(struct soap*, int, const char*, const char*, size_t*);

inline struct __GameWS__register_ * soap_new___GameWS__register_(struct soap *soap, int n = -1) { return soap_instantiate___GameWS__register_(soap, n, NULL, NULL, NULL); }

inline struct __GameWS__register_ * soap_new_req___GameWS__register_(struct soap *soap) { struct __GameWS__register_ *_p = soap_instantiate___GameWS__register_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___GameWS__register_(soap, _p); } return _p; }

inline struct __GameWS__register_ * soap_new_set___GameWS__register_(struct soap *soap, _GameWS__register *GameWS__register) { struct __GameWS__register_ *_p = soap_instantiate___GameWS__register_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___GameWS__register_(soap, _p); _p->GameWS__register = GameWS__register; } return _p; }

inline void soap_delete___GameWS__register_(struct soap *soap, struct __GameWS__register_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___GameWS__register_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___GameWS__getGamesPlayed_
#define SOAP_TYPE___GameWS__getGamesPlayed_ (33)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___GameWS__getGamesPlayed_(struct soap*, struct __GameWS__getGamesPlayed_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___GameWS__getGamesPlayed_(struct soap*, const struct __GameWS__getGamesPlayed_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___GameWS__getGamesPlayed_(struct soap*, const char*, int, const struct __GameWS__getGamesPlayed_ *, const char*);
SOAP_FMAC3 struct __GameWS__getGamesPlayed_ * SOAP_FMAC4 soap_in___GameWS__getGamesPlayed_(struct soap*, const char*, struct __GameWS__getGamesPlayed_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___GameWS__getGamesPlayed_(struct soap*, const struct __GameWS__getGamesPlayed_ *, const char*, const char*);

#ifndef soap_write___GameWS__getGamesPlayed_
#define soap_write___GameWS__getGamesPlayed_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___GameWS__getGamesPlayed_(soap, data),0) || soap_put___GameWS__getGamesPlayed_(soap, data, "-GameWS:getGamesPlayed", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __GameWS__getGamesPlayed_ * SOAP_FMAC4 soap_get___GameWS__getGamesPlayed_(struct soap*, struct __GameWS__getGamesPlayed_ *, const char*, const char*);

#ifndef soap_read___GameWS__getGamesPlayed_
#define soap_read___GameWS__getGamesPlayed_(soap, data) ( soap_begin_recv(soap) || !soap_get___GameWS__getGamesPlayed_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __GameWS__getGamesPlayed_ * SOAP_FMAC2 soap_instantiate___GameWS__getGamesPlayed_(struct soap*, int, const char*, const char*, size_t*);

inline struct __GameWS__getGamesPlayed_ * soap_new___GameWS__getGamesPlayed_(struct soap *soap, int n = -1) { return soap_instantiate___GameWS__getGamesPlayed_(soap, n, NULL, NULL, NULL); }

inline struct __GameWS__getGamesPlayed_ * soap_new_req___GameWS__getGamesPlayed_(struct soap *soap) { struct __GameWS__getGamesPlayed_ *_p = soap_instantiate___GameWS__getGamesPlayed_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___GameWS__getGamesPlayed_(soap, _p); } return _p; }

inline struct __GameWS__getGamesPlayed_ * soap_new_set___GameWS__getGamesPlayed_(struct soap *soap, _GameWS__getGamesPlayed *GameWS__getGamesPlayed) { struct __GameWS__getGamesPlayed_ *_p = soap_instantiate___GameWS__getGamesPlayed_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___GameWS__getGamesPlayed_(soap, _p); _p->GameWS__getGamesPlayed = GameWS__getGamesPlayed; } return _p; }

inline void soap_delete___GameWS__getGamesPlayed_(struct soap *soap, struct __GameWS__getGamesPlayed_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___GameWS__getGamesPlayed_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___GameWS__getOpponentsIpAddress
#define SOAP_TYPE___GameWS__getOpponentsIpAddress (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___GameWS__getOpponentsIpAddress(struct soap*, struct __GameWS__getOpponentsIpAddress *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___GameWS__getOpponentsIpAddress(struct soap*, const struct __GameWS__getOpponentsIpAddress *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___GameWS__getOpponentsIpAddress(struct soap*, const char*, int, const struct __GameWS__getOpponentsIpAddress *, const char*);
SOAP_FMAC3 struct __GameWS__getOpponentsIpAddress * SOAP_FMAC4 soap_in___GameWS__getOpponentsIpAddress(struct soap*, const char*, struct __GameWS__getOpponentsIpAddress *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___GameWS__getOpponentsIpAddress(struct soap*, const struct __GameWS__getOpponentsIpAddress *, const char*, const char*);

#ifndef soap_write___GameWS__getOpponentsIpAddress
#define soap_write___GameWS__getOpponentsIpAddress(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___GameWS__getOpponentsIpAddress(soap, data),0) || soap_put___GameWS__getOpponentsIpAddress(soap, data, "-GameWS:getOpponentsIpAddress", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __GameWS__getOpponentsIpAddress * SOAP_FMAC4 soap_get___GameWS__getOpponentsIpAddress(struct soap*, struct __GameWS__getOpponentsIpAddress *, const char*, const char*);

#ifndef soap_read___GameWS__getOpponentsIpAddress
#define soap_read___GameWS__getOpponentsIpAddress(soap, data) ( soap_begin_recv(soap) || !soap_get___GameWS__getOpponentsIpAddress(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __GameWS__getOpponentsIpAddress * SOAP_FMAC2 soap_instantiate___GameWS__getOpponentsIpAddress(struct soap*, int, const char*, const char*, size_t*);

inline struct __GameWS__getOpponentsIpAddress * soap_new___GameWS__getOpponentsIpAddress(struct soap *soap, int n = -1) { return soap_instantiate___GameWS__getOpponentsIpAddress(soap, n, NULL, NULL, NULL); }

inline struct __GameWS__getOpponentsIpAddress * soap_new_req___GameWS__getOpponentsIpAddress(struct soap *soap) { struct __GameWS__getOpponentsIpAddress *_p = soap_instantiate___GameWS__getOpponentsIpAddress(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___GameWS__getOpponentsIpAddress(soap, _p); } return _p; }

inline struct __GameWS__getOpponentsIpAddress * soap_new_set___GameWS__getOpponentsIpAddress(struct soap *soap, _GameWS__getOpponentsIpAddress *GameWS__getOpponentsIpAddress) { struct __GameWS__getOpponentsIpAddress *_p = soap_instantiate___GameWS__getOpponentsIpAddress(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___GameWS__getOpponentsIpAddress(soap, _p); _p->GameWS__getOpponentsIpAddress = GameWS__getOpponentsIpAddress; } return _p; }

inline void soap_delete___GameWS__getOpponentsIpAddress(struct soap *soap, struct __GameWS__getOpponentsIpAddress *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___GameWS__getOpponentsIpAddress(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___GameWS__register
#define SOAP_TYPE___GameWS__register (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___GameWS__register(struct soap*, struct __GameWS__register *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___GameWS__register(struct soap*, const struct __GameWS__register *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___GameWS__register(struct soap*, const char*, int, const struct __GameWS__register *, const char*);
SOAP_FMAC3 struct __GameWS__register * SOAP_FMAC4 soap_in___GameWS__register(struct soap*, const char*, struct __GameWS__register *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___GameWS__register(struct soap*, const struct __GameWS__register *, const char*, const char*);

#ifndef soap_write___GameWS__register
#define soap_write___GameWS__register(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___GameWS__register(soap, data),0) || soap_put___GameWS__register(soap, data, "-GameWS:register", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __GameWS__register * SOAP_FMAC4 soap_get___GameWS__register(struct soap*, struct __GameWS__register *, const char*, const char*);

#ifndef soap_read___GameWS__register
#define soap_read___GameWS__register(soap, data) ( soap_begin_recv(soap) || !soap_get___GameWS__register(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __GameWS__register * SOAP_FMAC2 soap_instantiate___GameWS__register(struct soap*, int, const char*, const char*, size_t*);

inline struct __GameWS__register * soap_new___GameWS__register(struct soap *soap, int n = -1) { return soap_instantiate___GameWS__register(soap, n, NULL, NULL, NULL); }

inline struct __GameWS__register * soap_new_req___GameWS__register(struct soap *soap) { struct __GameWS__register *_p = soap_instantiate___GameWS__register(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___GameWS__register(soap, _p); } return _p; }

inline struct __GameWS__register * soap_new_set___GameWS__register(struct soap *soap, _GameWS__register *GameWS__register) { struct __GameWS__register *_p = soap_instantiate___GameWS__register(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___GameWS__register(soap, _p); _p->GameWS__register = GameWS__register; } return _p; }

inline void soap_delete___GameWS__register(struct soap *soap, struct __GameWS__register *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___GameWS__register(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___GameWS__getGamesPlayed
#define SOAP_TYPE___GameWS__getGamesPlayed (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___GameWS__getGamesPlayed(struct soap*, struct __GameWS__getGamesPlayed *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___GameWS__getGamesPlayed(struct soap*, const struct __GameWS__getGamesPlayed *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___GameWS__getGamesPlayed(struct soap*, const char*, int, const struct __GameWS__getGamesPlayed *, const char*);
SOAP_FMAC3 struct __GameWS__getGamesPlayed * SOAP_FMAC4 soap_in___GameWS__getGamesPlayed(struct soap*, const char*, struct __GameWS__getGamesPlayed *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___GameWS__getGamesPlayed(struct soap*, const struct __GameWS__getGamesPlayed *, const char*, const char*);

#ifndef soap_write___GameWS__getGamesPlayed
#define soap_write___GameWS__getGamesPlayed(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___GameWS__getGamesPlayed(soap, data),0) || soap_put___GameWS__getGamesPlayed(soap, data, "-GameWS:getGamesPlayed", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __GameWS__getGamesPlayed * SOAP_FMAC4 soap_get___GameWS__getGamesPlayed(struct soap*, struct __GameWS__getGamesPlayed *, const char*, const char*);

#ifndef soap_read___GameWS__getGamesPlayed
#define soap_read___GameWS__getGamesPlayed(soap, data) ( soap_begin_recv(soap) || !soap_get___GameWS__getGamesPlayed(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __GameWS__getGamesPlayed * SOAP_FMAC2 soap_instantiate___GameWS__getGamesPlayed(struct soap*, int, const char*, const char*, size_t*);

inline struct __GameWS__getGamesPlayed * soap_new___GameWS__getGamesPlayed(struct soap *soap, int n = -1) { return soap_instantiate___GameWS__getGamesPlayed(soap, n, NULL, NULL, NULL); }

inline struct __GameWS__getGamesPlayed * soap_new_req___GameWS__getGamesPlayed(struct soap *soap) { struct __GameWS__getGamesPlayed *_p = soap_instantiate___GameWS__getGamesPlayed(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___GameWS__getGamesPlayed(soap, _p); } return _p; }

inline struct __GameWS__getGamesPlayed * soap_new_set___GameWS__getGamesPlayed(struct soap *soap, _GameWS__getGamesPlayed *GameWS__getGamesPlayed) { struct __GameWS__getGamesPlayed *_p = soap_instantiate___GameWS__getGamesPlayed(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___GameWS__getGamesPlayed(soap, _p); _p->GameWS__getGamesPlayed = GameWS__getGamesPlayed; } return _p; }

inline void soap_delete___GameWS__getGamesPlayed(struct soap *soap, struct __GameWS__getGamesPlayed *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___GameWS__getGamesPlayed(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (47)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (46)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (40)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTo_GameWS__getOpponentsIpAddressResponse
#define SOAP_TYPE_PointerTo_GameWS__getOpponentsIpAddressResponse (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_GameWS__getOpponentsIpAddressResponse(struct soap*, _GameWS__getOpponentsIpAddressResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_GameWS__getOpponentsIpAddressResponse(struct soap*, const char *, int, _GameWS__getOpponentsIpAddressResponse *const*, const char *);
SOAP_FMAC3 _GameWS__getOpponentsIpAddressResponse ** SOAP_FMAC4 soap_in_PointerTo_GameWS__getOpponentsIpAddressResponse(struct soap*, const char*, _GameWS__getOpponentsIpAddressResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_GameWS__getOpponentsIpAddressResponse(struct soap*, _GameWS__getOpponentsIpAddressResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_GameWS__getOpponentsIpAddressResponse
#define soap_write_PointerTo_GameWS__getOpponentsIpAddressResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_GameWS__getOpponentsIpAddressResponse(soap, data),0) || soap_put_PointerTo_GameWS__getOpponentsIpAddressResponse(soap, data, "GameWS:getOpponentsIpAddressResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _GameWS__getOpponentsIpAddressResponse ** SOAP_FMAC4 soap_get_PointerTo_GameWS__getOpponentsIpAddressResponse(struct soap*, _GameWS__getOpponentsIpAddressResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_GameWS__getOpponentsIpAddressResponse
#define soap_read_PointerTo_GameWS__getOpponentsIpAddressResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_GameWS__getOpponentsIpAddressResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_GameWS__getOpponentsIpAddress
#define SOAP_TYPE_PointerTo_GameWS__getOpponentsIpAddress (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_GameWS__getOpponentsIpAddress(struct soap*, _GameWS__getOpponentsIpAddress *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_GameWS__getOpponentsIpAddress(struct soap*, const char *, int, _GameWS__getOpponentsIpAddress *const*, const char *);
SOAP_FMAC3 _GameWS__getOpponentsIpAddress ** SOAP_FMAC4 soap_in_PointerTo_GameWS__getOpponentsIpAddress(struct soap*, const char*, _GameWS__getOpponentsIpAddress **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_GameWS__getOpponentsIpAddress(struct soap*, _GameWS__getOpponentsIpAddress *const*, const char*, const char*);

#ifndef soap_write_PointerTo_GameWS__getOpponentsIpAddress
#define soap_write_PointerTo_GameWS__getOpponentsIpAddress(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_GameWS__getOpponentsIpAddress(soap, data),0) || soap_put_PointerTo_GameWS__getOpponentsIpAddress(soap, data, "GameWS:getOpponentsIpAddress", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _GameWS__getOpponentsIpAddress ** SOAP_FMAC4 soap_get_PointerTo_GameWS__getOpponentsIpAddress(struct soap*, _GameWS__getOpponentsIpAddress **, const char*, const char*);

#ifndef soap_read_PointerTo_GameWS__getOpponentsIpAddress
#define soap_read_PointerTo_GameWS__getOpponentsIpAddress(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_GameWS__getOpponentsIpAddress(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_GameWS__registerResponse
#define SOAP_TYPE_PointerTo_GameWS__registerResponse (25)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_GameWS__registerResponse(struct soap*, _GameWS__registerResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_GameWS__registerResponse(struct soap*, const char *, int, _GameWS__registerResponse *const*, const char *);
SOAP_FMAC3 _GameWS__registerResponse ** SOAP_FMAC4 soap_in_PointerTo_GameWS__registerResponse(struct soap*, const char*, _GameWS__registerResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_GameWS__registerResponse(struct soap*, _GameWS__registerResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_GameWS__registerResponse
#define soap_write_PointerTo_GameWS__registerResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_GameWS__registerResponse(soap, data),0) || soap_put_PointerTo_GameWS__registerResponse(soap, data, "GameWS:registerResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _GameWS__registerResponse ** SOAP_FMAC4 soap_get_PointerTo_GameWS__registerResponse(struct soap*, _GameWS__registerResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_GameWS__registerResponse
#define soap_read_PointerTo_GameWS__registerResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_GameWS__registerResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_GameWS__register
#define SOAP_TYPE_PointerTo_GameWS__register (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_GameWS__register(struct soap*, _GameWS__register *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_GameWS__register(struct soap*, const char *, int, _GameWS__register *const*, const char *);
SOAP_FMAC3 _GameWS__register ** SOAP_FMAC4 soap_in_PointerTo_GameWS__register(struct soap*, const char*, _GameWS__register **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_GameWS__register(struct soap*, _GameWS__register *const*, const char*, const char*);

#ifndef soap_write_PointerTo_GameWS__register
#define soap_write_PointerTo_GameWS__register(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_GameWS__register(soap, data),0) || soap_put_PointerTo_GameWS__register(soap, data, "GameWS:register", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _GameWS__register ** SOAP_FMAC4 soap_get_PointerTo_GameWS__register(struct soap*, _GameWS__register **, const char*, const char*);

#ifndef soap_read_PointerTo_GameWS__register
#define soap_read_PointerTo_GameWS__register(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_GameWS__register(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_GameWS__getGamesPlayedResponse
#define SOAP_TYPE_PointerTo_GameWS__getGamesPlayedResponse (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_GameWS__getGamesPlayedResponse(struct soap*, _GameWS__getGamesPlayedResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_GameWS__getGamesPlayedResponse(struct soap*, const char *, int, _GameWS__getGamesPlayedResponse *const*, const char *);
SOAP_FMAC3 _GameWS__getGamesPlayedResponse ** SOAP_FMAC4 soap_in_PointerTo_GameWS__getGamesPlayedResponse(struct soap*, const char*, _GameWS__getGamesPlayedResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_GameWS__getGamesPlayedResponse(struct soap*, _GameWS__getGamesPlayedResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_GameWS__getGamesPlayedResponse
#define soap_write_PointerTo_GameWS__getGamesPlayedResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_GameWS__getGamesPlayedResponse(soap, data),0) || soap_put_PointerTo_GameWS__getGamesPlayedResponse(soap, data, "GameWS:getGamesPlayedResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _GameWS__getGamesPlayedResponse ** SOAP_FMAC4 soap_get_PointerTo_GameWS__getGamesPlayedResponse(struct soap*, _GameWS__getGamesPlayedResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_GameWS__getGamesPlayedResponse
#define soap_read_PointerTo_GameWS__getGamesPlayedResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_GameWS__getGamesPlayedResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_GameWS__getGamesPlayed
#define SOAP_TYPE_PointerTo_GameWS__getGamesPlayed (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_GameWS__getGamesPlayed(struct soap*, _GameWS__getGamesPlayed *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_GameWS__getGamesPlayed(struct soap*, const char *, int, _GameWS__getGamesPlayed *const*, const char *);
SOAP_FMAC3 _GameWS__getGamesPlayed ** SOAP_FMAC4 soap_in_PointerTo_GameWS__getGamesPlayed(struct soap*, const char*, _GameWS__getGamesPlayed **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_GameWS__getGamesPlayed(struct soap*, _GameWS__getGamesPlayed *const*, const char*, const char*);

#ifndef soap_write_PointerTo_GameWS__getGamesPlayed
#define soap_write_PointerTo_GameWS__getGamesPlayed(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_GameWS__getGamesPlayed(soap, data),0) || soap_put_PointerTo_GameWS__getGamesPlayed(soap, data, "GameWS:getGamesPlayed", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _GameWS__getGamesPlayed ** SOAP_FMAC4 soap_get_PointerTo_GameWS__getGamesPlayed(struct soap*, _GameWS__getGamesPlayed **, const char*, const char*);

#ifndef soap_read_PointerTo_GameWS__getGamesPlayed
#define soap_read_PointerTo_GameWS__getGamesPlayed(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_GameWS__getGamesPlayed(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__string
#define soap_write_PointerTostd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__string(soap, data),0) || soap_put_PointerTostd__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTostd__string
#define soap_read_PointerTostd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToGameWS__ArrayOfString
#define SOAP_TYPE_PointerToGameWS__ArrayOfString (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToGameWS__ArrayOfString(struct soap*, GameWS__ArrayOfString *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToGameWS__ArrayOfString(struct soap*, const char *, int, GameWS__ArrayOfString *const*, const char *);
SOAP_FMAC3 GameWS__ArrayOfString ** SOAP_FMAC4 soap_in_PointerToGameWS__ArrayOfString(struct soap*, const char*, GameWS__ArrayOfString **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToGameWS__ArrayOfString(struct soap*, GameWS__ArrayOfString *const*, const char*, const char*);

#ifndef soap_write_PointerToGameWS__ArrayOfString
#define soap_write_PointerToGameWS__ArrayOfString(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToGameWS__ArrayOfString(soap, data),0) || soap_put_PointerToGameWS__ArrayOfString(soap, data, "GameWS:ArrayOfString", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 GameWS__ArrayOfString ** SOAP_FMAC4 soap_get_PointerToGameWS__ArrayOfString(struct soap*, GameWS__ArrayOfString **, const char*, const char*);

#ifndef soap_read_PointerToGameWS__ArrayOfString
#define soap_read_PointerToGameWS__ArrayOfString(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToGameWS__ArrayOfString(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data),0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data),0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string
#define SOAP_TYPE_std__vectorTemplateOfstd__string (16)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

/* End of soapH.h */
